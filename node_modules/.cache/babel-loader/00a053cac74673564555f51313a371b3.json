{"ast":null,"code":"const dragEvents = ['dragover', 'dragenter', 'drop'];\n\nfunction fileAccepted(file, accept) {\n  return file.type === 'application/x-moz-file' || accepts(file, accept);\n}\n\nfunction getDataTransferFiles(event) {\n  if (isDragEvent(event) && event.dataTransfer) {\n    const dt = event.dataTransfer;\n\n    if (dt.files && dt.files.length) {\n      return Array.from(dt.files);\n    } else if (dt.items && dt.items.length) {\n      // Chrome is the only browser that allows to read the file list on drag\n      // events and uses `items` instead of `files` in this case.\n      return Array.from(dt.items);\n    }\n  } else if (isChangeEvent(event) && event.target.files) {\n    // Return files from even when a file was selected from an upload dialog\n    return Array.from(event.target.files);\n  }\n\n  return [];\n}\n\nfunction accepts(file, acceptedFiles) {\n  if (file && acceptedFiles) {\n    const fileName = file.name || '';\n    const mimeType = file.type || '';\n    const baseMimeType = mimeType.replace(/\\/.*$/, '');\n    const acceptedFilesArray = Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(',');\n    return acceptedFilesArray.some(type => {\n      const validType = type.trim();\n\n      if (validType.startsWith('.')) {\n        return fileName.toLowerCase().endsWith(validType.toLowerCase());\n      } else if (validType.endsWith('/*')) {\n        // This is something like a image/* mime type\n        return baseMimeType === validType.replace(/\\/.*$/, '');\n      }\n\n      return mimeType === validType;\n    });\n  }\n\n  return true;\n}\n\nfunction isDragEvent(event) {\n  return dragEvents.indexOf(event.type) > 0;\n}\n\nfunction isChangeEvent(event) {\n  return Object.prototype.hasOwnProperty.call(event, 'target');\n}\n\nconst defaultAllowMultiple = true;\n\nfunction createAllowMultipleKey(allowMultiple) {\n  return allowMultiple ? 'allowMultiple' : 'single';\n}\n\nexport { createAllowMultipleKey, defaultAllowMultiple, fileAccepted, getDataTransferFiles };","map":{"version":3,"sources":["/Users/yewonkwak/Documents/GitHub/spacestagram/node_modules/@shopify/polaris/dist/esm/components/DropZone/utils/index.js"],"names":["dragEvents","fileAccepted","file","accept","type","accepts","getDataTransferFiles","event","isDragEvent","dataTransfer","dt","files","length","Array","from","items","isChangeEvent","target","acceptedFiles","fileName","name","mimeType","baseMimeType","replace","acceptedFilesArray","isArray","split","some","validType","trim","startsWith","toLowerCase","endsWith","indexOf","Object","prototype","hasOwnProperty","call","defaultAllowMultiple","createAllowMultipleKey","allowMultiple"],"mappings":"AAAA,MAAMA,UAAU,GAAG,CAAC,UAAD,EAAa,WAAb,EAA0B,MAA1B,CAAnB;;AACA,SAASC,YAAT,CAAsBC,IAAtB,EAA4BC,MAA5B,EAAoC;AAClC,SAAOD,IAAI,CAACE,IAAL,KAAc,wBAAd,IAA0CC,OAAO,CAACH,IAAD,EAAOC,MAAP,CAAxD;AACD;;AACD,SAASG,oBAAT,CAA8BC,KAA9B,EAAqC;AACnC,MAAIC,WAAW,CAACD,KAAD,CAAX,IAAsBA,KAAK,CAACE,YAAhC,EAA8C;AAC5C,UAAMC,EAAE,GAAGH,KAAK,CAACE,YAAjB;;AAEA,QAAIC,EAAE,CAACC,KAAH,IAAYD,EAAE,CAACC,KAAH,CAASC,MAAzB,EAAiC;AAC/B,aAAOC,KAAK,CAACC,IAAN,CAAWJ,EAAE,CAACC,KAAd,CAAP;AACD,KAFD,MAEO,IAAID,EAAE,CAACK,KAAH,IAAYL,EAAE,CAACK,KAAH,CAASH,MAAzB,EAAiC;AACtC;AACA;AACA,aAAOC,KAAK,CAACC,IAAN,CAAWJ,EAAE,CAACK,KAAd,CAAP;AACD;AACF,GAVD,MAUO,IAAIC,aAAa,CAACT,KAAD,CAAb,IAAwBA,KAAK,CAACU,MAAN,CAAaN,KAAzC,EAAgD;AACrD;AACA,WAAOE,KAAK,CAACC,IAAN,CAAWP,KAAK,CAACU,MAAN,CAAaN,KAAxB,CAAP;AACD;;AAED,SAAO,EAAP;AACD;;AAED,SAASN,OAAT,CAAiBH,IAAjB,EAAuBgB,aAAvB,EAAsC;AACpC,MAAIhB,IAAI,IAAIgB,aAAZ,EAA2B;AACzB,UAAMC,QAAQ,GAAGjB,IAAI,CAACkB,IAAL,IAAa,EAA9B;AACA,UAAMC,QAAQ,GAAGnB,IAAI,CAACE,IAAL,IAAa,EAA9B;AACA,UAAMkB,YAAY,GAAGD,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAArB;AACA,UAAMC,kBAAkB,GAAGX,KAAK,CAACY,OAAN,CAAcP,aAAd,IAA+BA,aAA/B,GAA+CA,aAAa,CAACQ,KAAd,CAAoB,GAApB,CAA1E;AACA,WAAOF,kBAAkB,CAACG,IAAnB,CAAwBvB,IAAI,IAAI;AACrC,YAAMwB,SAAS,GAAGxB,IAAI,CAACyB,IAAL,EAAlB;;AAEA,UAAID,SAAS,CAACE,UAAV,CAAqB,GAArB,CAAJ,EAA+B;AAC7B,eAAOX,QAAQ,CAACY,WAAT,GAAuBC,QAAvB,CAAgCJ,SAAS,CAACG,WAAV,EAAhC,CAAP;AACD,OAFD,MAEO,IAAIH,SAAS,CAACI,QAAV,CAAmB,IAAnB,CAAJ,EAA8B;AACnC;AACA,eAAOV,YAAY,KAAKM,SAAS,CAACL,OAAV,CAAkB,OAAlB,EAA2B,EAA3B,CAAxB;AACD;;AAED,aAAOF,QAAQ,KAAKO,SAApB;AACD,KAXM,CAAP;AAYD;;AAED,SAAO,IAAP;AACD;;AAED,SAASpB,WAAT,CAAqBD,KAArB,EAA4B;AAC1B,SAAOP,UAAU,CAACiC,OAAX,CAAmB1B,KAAK,CAACH,IAAzB,IAAiC,CAAxC;AACD;;AAED,SAASY,aAAT,CAAuBT,KAAvB,EAA8B;AAC5B,SAAO2B,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqC9B,KAArC,EAA4C,QAA5C,CAAP;AACD;;AAED,MAAM+B,oBAAoB,GAAG,IAA7B;;AACA,SAASC,sBAAT,CAAgCC,aAAhC,EAA+C;AAC7C,SAAOA,aAAa,GAAG,eAAH,GAAqB,QAAzC;AACD;;AAED,SAASD,sBAAT,EAAiCD,oBAAjC,EAAuDrC,YAAvD,EAAqEK,oBAArE","sourcesContent":["const dragEvents = ['dragover', 'dragenter', 'drop'];\nfunction fileAccepted(file, accept) {\n  return file.type === 'application/x-moz-file' || accepts(file, accept);\n}\nfunction getDataTransferFiles(event) {\n  if (isDragEvent(event) && event.dataTransfer) {\n    const dt = event.dataTransfer;\n\n    if (dt.files && dt.files.length) {\n      return Array.from(dt.files);\n    } else if (dt.items && dt.items.length) {\n      // Chrome is the only browser that allows to read the file list on drag\n      // events and uses `items` instead of `files` in this case.\n      return Array.from(dt.items);\n    }\n  } else if (isChangeEvent(event) && event.target.files) {\n    // Return files from even when a file was selected from an upload dialog\n    return Array.from(event.target.files);\n  }\n\n  return [];\n}\n\nfunction accepts(file, acceptedFiles) {\n  if (file && acceptedFiles) {\n    const fileName = file.name || '';\n    const mimeType = file.type || '';\n    const baseMimeType = mimeType.replace(/\\/.*$/, '');\n    const acceptedFilesArray = Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(',');\n    return acceptedFilesArray.some(type => {\n      const validType = type.trim();\n\n      if (validType.startsWith('.')) {\n        return fileName.toLowerCase().endsWith(validType.toLowerCase());\n      } else if (validType.endsWith('/*')) {\n        // This is something like a image/* mime type\n        return baseMimeType === validType.replace(/\\/.*$/, '');\n      }\n\n      return mimeType === validType;\n    });\n  }\n\n  return true;\n}\n\nfunction isDragEvent(event) {\n  return dragEvents.indexOf(event.type) > 0;\n}\n\nfunction isChangeEvent(event) {\n  return Object.prototype.hasOwnProperty.call(event, 'target');\n}\n\nconst defaultAllowMultiple = true;\nfunction createAllowMultipleKey(allowMultiple) {\n  return allowMultiple ? 'allowMultiple' : 'single';\n}\n\nexport { createAllowMultipleKey, defaultAllowMultiple, fileAccepted, getDataTransferFiles };\n"]},"metadata":{},"sourceType":"module"}