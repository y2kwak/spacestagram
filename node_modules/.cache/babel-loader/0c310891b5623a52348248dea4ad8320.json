{"ast":null,"code":"import React$1, { Children, isValidElement } from 'react'; // `Component`. If `props` is passed, those will be added as props on the\n// wrapped component. If `element` is null, the component is not wrapped.\n\nfunction wrapWithComponent(element, Component, props) {\n  if (element == null) {\n    return null;\n  }\n\n  return isElementOfType(element, Component) ? element : /*#__PURE__*/React$1.createElement(Component, props, element);\n} // In development, we compare based on the name of the function because\n// React Hot Loader proxies React components in order to make updates. In\n// production we can simply compare the components for equality.\n\n\nconst isComponent = process.env.NODE_ENV === 'development' ? hotReloadComponentCheck : (AComponent, AnotherComponent) => AComponent === AnotherComponent; // Checks whether `element` is a React element of type `Component` (or one of\n// the passed components, if `Component` is an array of React components).\n\nfunction isElementOfType(element, Component) {\n  var _element$props;\n\n  if (element == null || ! /*#__PURE__*/isValidElement(element) || typeof element.type === 'string') {\n    return false;\n  }\n\n  const {\n    type: defaultType\n  } = element; // Type override allows components to bypass default wrapping behavior. Ex: Stack, ResourceList...\n  // See https://github.com/Shopify/app-extension-libs/issues/996#issuecomment-710437088\n\n  const overrideType = (_element$props = element.props) == null ? void 0 : _element$props.__type__;\n  const type = overrideType || defaultType;\n  const Components = Array.isArray(Component) ? Component : [Component];\n  return Components.some(AComponent => typeof type !== 'string' && isComponent(AComponent, type));\n} // Returns all children that are valid elements as an array. Can optionally be\n// filtered by passing `predicate`.\n\n\nfunction elementChildren(children) {\n  let predicate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => true;\n  return Children.toArray(children).filter(child => /*#__PURE__*/isValidElement(child) && predicate(child));\n}\n\nfunction ConditionalWrapper(_ref) {\n  let {\n    condition,\n    wrapper,\n    children\n  } = _ref;\n  return condition ? wrapper(children) : children;\n}\n\nfunction ConditionalRender(_ref2) {\n  let {\n    condition,\n    children\n  } = _ref2;\n  return condition ? children : null;\n}\n\nfunction hotReloadComponentCheck(AComponent, AnotherComponent) {\n  const componentName = AComponent.name;\n  const anotherComponentName = AnotherComponent.displayName;\n  return AComponent === AnotherComponent || Boolean(componentName) && componentName === anotherComponentName;\n}\n\nexport { ConditionalRender, ConditionalWrapper, elementChildren, isElementOfType, wrapWithComponent };","map":{"version":3,"sources":["/Users/yewonkwak/Documents/GitHub/spacestagram/node_modules/@shopify/polaris/dist/esm/utilities/components.js"],"names":["React$1","Children","isValidElement","wrapWithComponent","element","Component","props","isElementOfType","createElement","isComponent","process","env","NODE_ENV","hotReloadComponentCheck","AComponent","AnotherComponent","_element$props","type","defaultType","overrideType","__type__","Components","Array","isArray","some","elementChildren","children","predicate","toArray","filter","child","ConditionalWrapper","condition","wrapper","ConditionalRender","componentName","name","anotherComponentName","displayName","Boolean"],"mappings":"AAAA,OAAOA,OAAP,IAAkBC,QAAlB,EAA4BC,cAA5B,QAAkD,OAAlD,C,CAEA;AACA;;AAEA,SAASC,iBAAT,CAA2BC,OAA3B,EAAoCC,SAApC,EAA+CC,KAA/C,EAAsD;AACpD,MAAIF,OAAO,IAAI,IAAf,EAAqB;AACnB,WAAO,IAAP;AACD;;AAED,SAAOG,eAAe,CAACH,OAAD,EAAUC,SAAV,CAAf,GAAsCD,OAAtC,GAAgD,aAAaJ,OAAO,CAACQ,aAAR,CAAsBH,SAAtB,EAAiCC,KAAjC,EAAwCF,OAAxC,CAApE;AACD,C,CAAC;AACF;AACA;;;AAEA,MAAMK,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,GAAyCC,uBAAzC,GAAmE,CAACC,UAAD,EAAaC,gBAAb,KAAkCD,UAAU,KAAKC,gBAAxI,C,CAA0J;AAC1J;;AAEA,SAASR,eAAT,CAAyBH,OAAzB,EAAkCC,SAAlC,EAA6C;AAC3C,MAAIW,cAAJ;;AAEA,MAAIZ,OAAO,IAAI,IAAX,IAAmB,EAAE,aAAaF,cAAc,CAACE,OAAD,CAAhD,IAA6D,OAAOA,OAAO,CAACa,IAAf,KAAwB,QAAzF,EAAmG;AACjG,WAAO,KAAP;AACD;;AAED,QAAM;AACJA,IAAAA,IAAI,EAAEC;AADF,MAEFd,OAFJ,CAP2C,CAS9B;AACb;;AAEA,QAAMe,YAAY,GAAG,CAACH,cAAc,GAAGZ,OAAO,CAACE,KAA1B,KAAoC,IAApC,GAA2C,KAAK,CAAhD,GAAoDU,cAAc,CAACI,QAAxF;AACA,QAAMH,IAAI,GAAGE,YAAY,IAAID,WAA7B;AACA,QAAMG,UAAU,GAAGC,KAAK,CAACC,OAAN,CAAclB,SAAd,IAA2BA,SAA3B,GAAuC,CAACA,SAAD,CAA1D;AACA,SAAOgB,UAAU,CAACG,IAAX,CAAgBV,UAAU,IAAI,OAAOG,IAAP,KAAgB,QAAhB,IAA4BR,WAAW,CAACK,UAAD,EAAaG,IAAb,CAArE,CAAP;AACD,C,CAAC;AACF;;;AAEA,SAASQ,eAAT,CAAyBC,QAAzB,EAA2D;AAAA,MAAxBC,SAAwB,uEAAZ,MAAM,IAAM;AACzD,SAAO1B,QAAQ,CAAC2B,OAAT,CAAiBF,QAAjB,EAA2BG,MAA3B,CAAkCC,KAAK,IAAI,aAAa5B,cAAc,CAAC4B,KAAD,CAAd,IAAyBH,SAAS,CAACG,KAAD,CAA1F,CAAP;AACD;;AACD,SAASC,kBAAT,OAIG;AAAA,MAJyB;AAC1BC,IAAAA,SAD0B;AAE1BC,IAAAA,OAF0B;AAG1BP,IAAAA;AAH0B,GAIzB;AACD,SAAOM,SAAS,GAAGC,OAAO,CAACP,QAAD,CAAV,GAAuBA,QAAvC;AACD;;AACD,SAASQ,iBAAT,QAGG;AAAA,MAHwB;AACzBF,IAAAA,SADyB;AAEzBN,IAAAA;AAFyB,GAGxB;AACD,SAAOM,SAAS,GAAGN,QAAH,GAAc,IAA9B;AACD;;AAED,SAASb,uBAAT,CAAiCC,UAAjC,EAA6CC,gBAA7C,EAA+D;AAC7D,QAAMoB,aAAa,GAAGrB,UAAU,CAACsB,IAAjC;AACA,QAAMC,oBAAoB,GAAGtB,gBAAgB,CAACuB,WAA9C;AACA,SAAOxB,UAAU,KAAKC,gBAAf,IAAmCwB,OAAO,CAACJ,aAAD,CAAP,IAA0BA,aAAa,KAAKE,oBAAtF;AACD;;AAED,SAASH,iBAAT,EAA4BH,kBAA5B,EAAgDN,eAAhD,EAAiElB,eAAjE,EAAkFJ,iBAAlF","sourcesContent":["import React$1, { Children, isValidElement } from 'react';\n\n// `Component`. If `props` is passed, those will be added as props on the\n// wrapped component. If `element` is null, the component is not wrapped.\n\nfunction wrapWithComponent(element, Component, props) {\n  if (element == null) {\n    return null;\n  }\n\n  return isElementOfType(element, Component) ? element : /*#__PURE__*/React$1.createElement(Component, props, element);\n} // In development, we compare based on the name of the function because\n// React Hot Loader proxies React components in order to make updates. In\n// production we can simply compare the components for equality.\n\nconst isComponent = process.env.NODE_ENV === 'development' ? hotReloadComponentCheck : (AComponent, AnotherComponent) => AComponent === AnotherComponent; // Checks whether `element` is a React element of type `Component` (or one of\n// the passed components, if `Component` is an array of React components).\n\nfunction isElementOfType(element, Component) {\n  var _element$props;\n\n  if (element == null || ! /*#__PURE__*/isValidElement(element) || typeof element.type === 'string') {\n    return false;\n  }\n\n  const {\n    type: defaultType\n  } = element; // Type override allows components to bypass default wrapping behavior. Ex: Stack, ResourceList...\n  // See https://github.com/Shopify/app-extension-libs/issues/996#issuecomment-710437088\n\n  const overrideType = (_element$props = element.props) == null ? void 0 : _element$props.__type__;\n  const type = overrideType || defaultType;\n  const Components = Array.isArray(Component) ? Component : [Component];\n  return Components.some(AComponent => typeof type !== 'string' && isComponent(AComponent, type));\n} // Returns all children that are valid elements as an array. Can optionally be\n// filtered by passing `predicate`.\n\nfunction elementChildren(children, predicate = () => true) {\n  return Children.toArray(children).filter(child => /*#__PURE__*/isValidElement(child) && predicate(child));\n}\nfunction ConditionalWrapper({\n  condition,\n  wrapper,\n  children\n}) {\n  return condition ? wrapper(children) : children;\n}\nfunction ConditionalRender({\n  condition,\n  children\n}) {\n  return condition ? children : null;\n}\n\nfunction hotReloadComponentCheck(AComponent, AnotherComponent) {\n  const componentName = AComponent.name;\n  const anotherComponentName = AnotherComponent.displayName;\n  return AComponent === AnotherComponent || Boolean(componentName) && componentName === anotherComponentName;\n}\n\nexport { ConditionalRender, ConditionalWrapper, elementChildren, isElementOfType, wrapWithComponent };\n"]},"metadata":{},"sourceType":"module"}