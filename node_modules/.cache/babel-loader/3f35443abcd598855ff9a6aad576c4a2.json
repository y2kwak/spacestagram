{"ast":null,"code":"import { useContext, useRef } from 'react';\nimport { MissingAppProviderError } from '../errors.js';\nimport { UniqueIdFactoryContext } from './context.js';\n/**\n * Returns a unique id that remains consistent across multiple re-renders of the\n * same hook\n * @param prefix Defines a prefix for the ID. You probably want to set this to\n *   the name of the component you're calling `useUniqueId` in.\n * @param overrideId Defines a fixed value to use instead of generating a unique\n *   ID. Useful for components that allow consumers to specify their own ID.\n */\n\nfunction useUniqueId() {\n  let prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let overrideId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  const idFactory = useContext(UniqueIdFactoryContext); // By using a ref to store the uniqueId for each invocation of the hook and\n  // checking that it is not already populated we ensure that we don’t generate\n  // a new ID on every re-render of a component.\n\n  const uniqueIdRef = useRef(null);\n\n  if (!idFactory) {\n    throw new MissingAppProviderError('No UniqueIdFactory was provided.');\n  } // If an override was specified, then use that instead of using a unique ID\n  // Hooks can’t be called conditionally so this has to go after all use* calls\n\n\n  if (overrideId) {\n    return overrideId;\n  } // If a unique id has not yet been generated, then get a new one\n\n\n  if (!uniqueIdRef.current) {\n    uniqueIdRef.current = idFactory.nextId(prefix);\n  }\n\n  return uniqueIdRef.current;\n}\n\nexport { useUniqueId };","map":{"version":3,"sources":["/Users/yewonkwak/Documents/GitHub/spacestagram/node_modules/@shopify/polaris/dist/esm/utilities/unique-id/hooks.js"],"names":["useContext","useRef","MissingAppProviderError","UniqueIdFactoryContext","useUniqueId","prefix","overrideId","idFactory","uniqueIdRef","current","nextId"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,MAArB,QAAmC,OAAnC;AACA,SAASC,uBAAT,QAAwC,cAAxC;AACA,SAASC,sBAAT,QAAuC,cAAvC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,WAAT,GAAmD;AAAA,MAA9BC,MAA8B,uEAArB,EAAqB;AAAA,MAAjBC,UAAiB,uEAAJ,EAAI;AACjD,QAAMC,SAAS,GAAGP,UAAU,CAACG,sBAAD,CAA5B,CADiD,CACK;AACtD;AACA;;AAEA,QAAMK,WAAW,GAAGP,MAAM,CAAC,IAAD,CAA1B;;AAEA,MAAI,CAACM,SAAL,EAAgB;AACd,UAAM,IAAIL,uBAAJ,CAA4B,kCAA5B,CAAN;AACD,GATgD,CAS/C;AACF;;;AAGA,MAAII,UAAJ,EAAgB;AACd,WAAOA,UAAP;AACD,GAfgD,CAe/C;;;AAGF,MAAI,CAACE,WAAW,CAACC,OAAjB,EAA0B;AACxBD,IAAAA,WAAW,CAACC,OAAZ,GAAsBF,SAAS,CAACG,MAAV,CAAiBL,MAAjB,CAAtB;AACD;;AAED,SAAOG,WAAW,CAACC,OAAnB;AACD;;AAED,SAASL,WAAT","sourcesContent":["import { useContext, useRef } from 'react';\nimport { MissingAppProviderError } from '../errors.js';\nimport { UniqueIdFactoryContext } from './context.js';\n\n/**\n * Returns a unique id that remains consistent across multiple re-renders of the\n * same hook\n * @param prefix Defines a prefix for the ID. You probably want to set this to\n *   the name of the component you're calling `useUniqueId` in.\n * @param overrideId Defines a fixed value to use instead of generating a unique\n *   ID. Useful for components that allow consumers to specify their own ID.\n */\n\nfunction useUniqueId(prefix = '', overrideId = '') {\n  const idFactory = useContext(UniqueIdFactoryContext); // By using a ref to store the uniqueId for each invocation of the hook and\n  // checking that it is not already populated we ensure that we don’t generate\n  // a new ID on every re-render of a component.\n\n  const uniqueIdRef = useRef(null);\n\n  if (!idFactory) {\n    throw new MissingAppProviderError('No UniqueIdFactory was provided.');\n  } // If an override was specified, then use that instead of using a unique ID\n  // Hooks can’t be called conditionally so this has to go after all use* calls\n\n\n  if (overrideId) {\n    return overrideId;\n  } // If a unique id has not yet been generated, then get a new one\n\n\n  if (!uniqueIdRef.current) {\n    uniqueIdRef.current = idFactory.nextId(prefix);\n  }\n\n  return uniqueIdRef.current;\n}\n\nexport { useUniqueId };\n"]},"metadata":{},"sourceType":"module"}