{"ast":null,"code":"import { Key } from '../../types.js';\nimport React$1, { useRef, useState, useEffect } from 'react';\nimport { EventListener as EventListener$1 } from '../EventListener/EventListener.js';\nimport { useFocusManager } from '../../utilities/focus-manager/hooks.js';\nimport { portal } from '../shared.js';\nimport { focusFirstFocusableNode, findFirstKeyboardFocusableNode, findLastKeyboardFocusableNode, focusFirstKeyboardFocusableNode, focusLastKeyboardFocusableNode } from '../../utilities/focus.js';\nimport { KeypressListener as KeypressListener$1 } from '../KeypressListener/KeypressListener.js';\nimport { Focus as Focus$1 } from '../Focus/Focus.js';\n\nfunction TrapFocus(_ref) {\n  let {\n    trapping = true,\n    children\n  } = _ref;\n  const {\n    canSafelyFocus\n  } = useFocusManager({\n    trapping\n  });\n  const focusTrapWrapper = useRef(null);\n  const [disableFocus, setDisableFocus] = useState(true);\n  useEffect(() => {\n    const disable = canSafelyFocus && !(focusTrapWrapper.current && focusTrapWrapper.current.contains(document.activeElement)) ? !trapping : true;\n    setDisableFocus(disable);\n  }, [canSafelyFocus, trapping]);\n\n  const handleFocusIn = event => {\n    const containerContentsHaveFocus = focusTrapWrapper.current && focusTrapWrapper.current.contains(document.activeElement);\n\n    if (trapping === false || !focusTrapWrapper.current || containerContentsHaveFocus || event.target instanceof Element && event.target.matches(`${portal.selector} *`)) {\n      return;\n    }\n\n    if (canSafelyFocus && event.target instanceof HTMLElement && focusTrapWrapper.current !== event.target && !focusTrapWrapper.current.contains(event.target)) {\n      focusFirstFocusableNode(focusTrapWrapper.current);\n    }\n  };\n\n  const handleTab = event => {\n    if (trapping === false || !focusTrapWrapper.current) {\n      return;\n    }\n\n    const firstFocusableNode = findFirstKeyboardFocusableNode(focusTrapWrapper.current);\n    const lastFocusableNode = findLastKeyboardFocusableNode(focusTrapWrapper.current);\n\n    if (event.target === lastFocusableNode && !event.shiftKey) {\n      event.preventDefault();\n      focusFirstKeyboardFocusableNode(focusTrapWrapper.current);\n    }\n\n    if (event.target === firstFocusableNode && event.shiftKey) {\n      event.preventDefault();\n      focusLastKeyboardFocusableNode(focusTrapWrapper.current);\n    }\n  };\n\n  return /*#__PURE__*/React$1.createElement(Focus$1, {\n    disabled: disableFocus,\n    root: focusTrapWrapper.current\n  }, /*#__PURE__*/React$1.createElement(\"div\", {\n    ref: focusTrapWrapper\n  }, /*#__PURE__*/React$1.createElement(EventListener$1, {\n    event: \"focusin\",\n    handler: handleFocusIn\n  }), /*#__PURE__*/React$1.createElement(KeypressListener$1, {\n    keyCode: Key.Tab,\n    keyEvent: \"keydown\",\n    handler: handleTab\n  }), children));\n}\n\nexport { TrapFocus };","map":{"version":3,"sources":["/Users/yewonkwak/Documents/GitHub/spacestagram/node_modules/@shopify/polaris/dist/esm/components/TrapFocus/TrapFocus.js"],"names":["Key","React$1","useRef","useState","useEffect","EventListener","EventListener$1","useFocusManager","portal","focusFirstFocusableNode","findFirstKeyboardFocusableNode","findLastKeyboardFocusableNode","focusFirstKeyboardFocusableNode","focusLastKeyboardFocusableNode","KeypressListener","KeypressListener$1","Focus","Focus$1","TrapFocus","trapping","children","canSafelyFocus","focusTrapWrapper","disableFocus","setDisableFocus","disable","current","contains","document","activeElement","handleFocusIn","event","containerContentsHaveFocus","target","Element","matches","selector","HTMLElement","handleTab","firstFocusableNode","lastFocusableNode","shiftKey","preventDefault","createElement","disabled","root","ref","handler","keyCode","Tab","keyEvent"],"mappings":"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","sourcesContent":["import { Key } from '../../types.js';\nimport React$1, { useRef, useState, useEffect } from 'react';\nimport { EventListener as EventListener$1 } from '../EventListener/EventListener.js';\nimport { useFocusManager } from '../../utilities/focus-manager/hooks.js';\nimport { portal } from '../shared.js';\nimport { focusFirstFocusableNode, findFirstKeyboardFocusableNode, findLastKeyboardFocusableNode, focusFirstKeyboardFocusableNode, focusLastKeyboardFocusableNode } from '../../utilities/focus.js';\nimport { KeypressListener as KeypressListener$1 } from '../KeypressListener/KeypressListener.js';\nimport { Focus as Focus$1 } from '../Focus/Focus.js';\n\nfunction TrapFocus({\n  trapping = true,\n  children\n}) {\n  const {\n    canSafelyFocus\n  } = useFocusManager({\n    trapping\n  });\n  const focusTrapWrapper = useRef(null);\n  const [disableFocus, setDisableFocus] = useState(true);\n  useEffect(() => {\n    const disable = canSafelyFocus && !(focusTrapWrapper.current && focusTrapWrapper.current.contains(document.activeElement)) ? !trapping : true;\n    setDisableFocus(disable);\n  }, [canSafelyFocus, trapping]);\n\n  const handleFocusIn = event => {\n    const containerContentsHaveFocus = focusTrapWrapper.current && focusTrapWrapper.current.contains(document.activeElement);\n\n    if (trapping === false || !focusTrapWrapper.current || containerContentsHaveFocus || event.target instanceof Element && event.target.matches(`${portal.selector} *`)) {\n      return;\n    }\n\n    if (canSafelyFocus && event.target instanceof HTMLElement && focusTrapWrapper.current !== event.target && !focusTrapWrapper.current.contains(event.target)) {\n      focusFirstFocusableNode(focusTrapWrapper.current);\n    }\n  };\n\n  const handleTab = event => {\n    if (trapping === false || !focusTrapWrapper.current) {\n      return;\n    }\n\n    const firstFocusableNode = findFirstKeyboardFocusableNode(focusTrapWrapper.current);\n    const lastFocusableNode = findLastKeyboardFocusableNode(focusTrapWrapper.current);\n\n    if (event.target === lastFocusableNode && !event.shiftKey) {\n      event.preventDefault();\n      focusFirstKeyboardFocusableNode(focusTrapWrapper.current);\n    }\n\n    if (event.target === firstFocusableNode && event.shiftKey) {\n      event.preventDefault();\n      focusLastKeyboardFocusableNode(focusTrapWrapper.current);\n    }\n  };\n\n  return /*#__PURE__*/React$1.createElement(Focus$1, {\n    disabled: disableFocus,\n    root: focusTrapWrapper.current\n  }, /*#__PURE__*/React$1.createElement(\"div\", {\n    ref: focusTrapWrapper\n  }, /*#__PURE__*/React$1.createElement(EventListener$1, {\n    event: \"focusin\",\n    handler: handleFocusIn\n  }), /*#__PURE__*/React$1.createElement(KeypressListener$1, {\n    keyCode: Key.Tab,\n    keyEvent: \"keydown\",\n    handler: handleTab\n  }), children));\n}\n\nexport { TrapFocus };\n"]},"metadata":{},"sourceType":"module"}