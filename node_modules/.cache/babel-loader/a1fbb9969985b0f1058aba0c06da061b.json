{"ast":null,"code":"import React$1, { memo, useEffect } from 'react';\nimport { focusFirstFocusableNode } from '../../utilities/focus.js';\nconst Focus = /*#__PURE__*/memo(function Focus(_ref) {\n  let {\n    children,\n    disabled,\n    root\n  } = _ref;\n  useEffect(() => {\n    if (disabled || !root) {\n      return;\n    }\n\n    const node = isRef(root) ? root.current : root;\n\n    if (!node || node.querySelector('[autofocus]')) {\n      return;\n    }\n\n    focusFirstFocusableNode(node, false);\n  }, [disabled, root]);\n  return /*#__PURE__*/React$1.createElement(React$1.Fragment, null, children);\n});\n\nfunction isRef(ref) {\n  return ref.current !== undefined;\n}\n\nexport { Focus };","map":{"version":3,"sources":["/Users/yewonkwak/Documents/GitHub/spacestagram/node_modules/@shopify/polaris/dist/esm/components/Focus/Focus.js"],"names":["React$1","memo","useEffect","focusFirstFocusableNode","Focus","children","disabled","root","node","isRef","current","querySelector","createElement","Fragment","ref","undefined"],"mappings":"AAAA,OAAOA,OAAP,IAAkBC,IAAlB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,SAASC,uBAAT,QAAwC,0BAAxC;AAEA,MAAMC,KAAK,GAAG,aAAaH,IAAI,CAAC,SAASG,KAAT,OAI7B;AAAA,MAJ4C;AAC7CC,IAAAA,QAD6C;AAE7CC,IAAAA,QAF6C;AAG7CC,IAAAA;AAH6C,GAI5C;AACDL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,QAAQ,IAAI,CAACC,IAAjB,EAAuB;AACrB;AACD;;AAED,UAAMC,IAAI,GAAGC,KAAK,CAACF,IAAD,CAAL,GAAcA,IAAI,CAACG,OAAnB,GAA6BH,IAA1C;;AAEA,QAAI,CAACC,IAAD,IAASA,IAAI,CAACG,aAAL,CAAmB,aAAnB,CAAb,EAAgD;AAC9C;AACD;;AAEDR,IAAAA,uBAAuB,CAACK,IAAD,EAAO,KAAP,CAAvB;AACD,GAZQ,EAYN,CAACF,QAAD,EAAWC,IAAX,CAZM,CAAT;AAaA,SAAO,aAAaP,OAAO,CAACY,aAAR,CAAsBZ,OAAO,CAACa,QAA9B,EAAwC,IAAxC,EAA8CR,QAA9C,CAApB;AACD,CAnB8B,CAA/B;;AAqBA,SAASI,KAAT,CAAeK,GAAf,EAAoB;AAClB,SAAOA,GAAG,CAACJ,OAAJ,KAAgBK,SAAvB;AACD;;AAED,SAASX,KAAT","sourcesContent":["import React$1, { memo, useEffect } from 'react';\nimport { focusFirstFocusableNode } from '../../utilities/focus.js';\n\nconst Focus = /*#__PURE__*/memo(function Focus({\n  children,\n  disabled,\n  root\n}) {\n  useEffect(() => {\n    if (disabled || !root) {\n      return;\n    }\n\n    const node = isRef(root) ? root.current : root;\n\n    if (!node || node.querySelector('[autofocus]')) {\n      return;\n    }\n\n    focusFirstFocusableNode(node, false);\n  }, [disabled, root]);\n  return /*#__PURE__*/React$1.createElement(React$1.Fragment, null, children);\n});\n\nfunction isRef(ref) {\n  return ref.current !== undefined;\n}\n\nexport { Focus };\n"]},"metadata":{},"sourceType":"module"}