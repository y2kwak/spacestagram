{"ast":null,"code":"import React$1, { useRef, useState, useCallback, useMemo, useEffect } from 'react';\nimport { objectWithoutProperties as _objectWithoutProperties } from '../../../../_virtual/_rollupPluginBabelHelpers.js';\nimport debounce$1 from 'lodash/debounce';\nimport { EventListener as EventListener$1 } from '../../../EventListener/EventListener.js';\nimport { useI18n } from '../../../../utilities/i18n/hooks.js';\nimport { ButtonGroup as ButtonGroup$1 } from '../../../ButtonGroup/ButtonGroup.js';\nimport { SecondaryAction as SecondaryAction$1 } from '../SecondaryAction/SecondaryAction.js';\nimport { MenuGroup as MenuGroup$1 } from '../MenuGroup/MenuGroup.js';\nimport styles from './Actions.scss.js';\nconst ACTION_SPACING = 8;\n\nfunction Actions(_ref) {\n  let {\n    actions = [],\n    groups = []\n  } = _ref;\n  const i18n = useI18n();\n  const actionsLayoutRef = useRef(null);\n  const menuGroupWidthRef = useRef(0);\n  const availableWidthRef = useRef(0);\n  const actionsAndGroupsLengthRef = useRef(0);\n  const timesMeasured = useRef(0);\n  const actionWidthsRef = useRef([]);\n  const [activeMenuGroup, setActiveMenuGroup] = useState(undefined);\n  const [measuredActions, setMeasuredActions] = useState({\n    showable: [],\n    rolledUp: []\n  });\n  const defaultRollupGroup = {\n    title: i18n.translate('Polaris.Actions.moreActions'),\n    actions: []\n  };\n  const lastMenuGroup = [...groups].pop();\n  const lastMenuGroupWidth = [...actionWidthsRef.current].pop() || 0;\n  const handleActionsOffsetWidth = useCallback(width => {\n    actionWidthsRef.current = [...actionWidthsRef.current, width];\n  }, []);\n  const handleMenuGroupToggle = useCallback(group => setActiveMenuGroup(activeMenuGroup ? undefined : group), [activeMenuGroup]);\n  const handleMenuGroupClose = useCallback(() => setActiveMenuGroup(undefined), []);\n  const updateActions = useCallback(() => {\n    let actionsAndGroups = [...actions, ...groups];\n\n    if (groups.length > 0) {\n      // We don't want to include actions from the last group\n      // since it is always rendered with its own actions\n      actionsAndGroups = [...actionsAndGroups].slice(0, actionsAndGroups.length - 1);\n    }\n\n    const showable = actionsAndGroups.slice(0, measuredActions.showable.length);\n    const rolledUp = actionsAndGroups.slice(measuredActions.showable.length, actionsAndGroups.length);\n    setMeasuredActions({\n      showable,\n      rolledUp\n    });\n  }, [actions, groups, measuredActions.showable.length]);\n  const measureActions = useCallback(() => {\n    if (actionWidthsRef.current.length === 0 || availableWidthRef.current === 0) {\n      return;\n    }\n\n    const actionsAndGroups = [...actions, ...groups];\n\n    if (actionsAndGroups.length === 1) {\n      setMeasuredActions({\n        showable: actionsAndGroups,\n        rolledUp: []\n      });\n      return;\n    }\n\n    let currentAvailableWidth = availableWidthRef.current;\n    let newShowableActions = [];\n    let newRolledUpActions = [];\n    actionsAndGroups.forEach((action, index) => {\n      const canFitAction = actionWidthsRef.current[index] + menuGroupWidthRef.current + ACTION_SPACING + lastMenuGroupWidth <= currentAvailableWidth;\n\n      if (canFitAction) {\n        currentAvailableWidth -= actionWidthsRef.current[index] + ACTION_SPACING * 2;\n        newShowableActions = [...newShowableActions, action];\n      } else {\n        currentAvailableWidth = 0; // Find last group if it exists and always render it as a rolled up action below\n\n        if (action === lastMenuGroup) return;\n        newRolledUpActions = [...newRolledUpActions, action];\n      }\n    });\n    setMeasuredActions({\n      showable: newShowableActions,\n      rolledUp: newRolledUpActions\n    });\n    timesMeasured.current += 1;\n    actionsAndGroupsLengthRef.current = actionsAndGroups.length;\n  }, [actions, groups, lastMenuGroup, lastMenuGroupWidth]);\n  const handleResize = useMemo(() => debounce$1(() => {\n    if (!actionsLayoutRef.current) return;\n    availableWidthRef.current = actionsLayoutRef.current.offsetWidth; // Set timesMeasured to 0 to allow re-measuring\n\n    timesMeasured.current = 0;\n    measureActions();\n  }, 50, {\n    leading: false,\n    trailing: true\n  }), [measureActions]);\n  useEffect(() => {\n    if (!actionsLayoutRef.current) {\n      return;\n    }\n\n    availableWidthRef.current = actionsLayoutRef.current.offsetWidth;\n\n    if ( // Allow measuring twice\n    // This accounts for the initial paint and re-flow\n    timesMeasured.current >= 2 && [...actions, ...groups].length === actionsAndGroupsLengthRef.current) {\n      updateActions();\n      return;\n    }\n\n    measureActions();\n  }, [actions, groups, measureActions, updateActions]);\n  const actionsMarkup = actions.map(action => {\n    if (measuredActions.showable.length > 0 || measuredActions.rolledUp.includes(action)) return null;\n\n    const {\n      content,\n      onAction\n    } = action,\n          rest = _objectWithoutProperties(action, [\"content\", \"onAction\"]);\n\n    return /*#__PURE__*/React$1.createElement(SecondaryAction$1, Object.assign({\n      key: content,\n      onClick: onAction\n    }, rest, {\n      getOffsetWidth: handleActionsOffsetWidth\n    }), content);\n  });\n  const rollUppableActionsMarkup = measuredActions.showable.length > 0 ? measuredActions.showable.map(action => action.content && /*#__PURE__*/React$1.createElement(SecondaryAction$1, Object.assign({\n    key: action.content\n  }, action, {\n    getOffsetWidth: handleActionsOffsetWidth\n  }), action.content)) : null;\n  const filteredGroups = [...groups, defaultRollupGroup].filter(group => {\n    return groups.length === 0 ? group : group === lastMenuGroup || !measuredActions.rolledUp.some(rolledUpGroup => isMenuGroup(rolledUpGroup) && rolledUpGroup.title === group.title);\n  });\n  const groupsMarkup = filteredGroups.map(group => {\n    const {\n      title,\n      actions: groupActions\n    } = group,\n          rest = _objectWithoutProperties(group, [\"title\", \"actions\"]);\n\n    const isDefaultGroup = group === defaultRollupGroup;\n    const isLastMenuGroup = group === lastMenuGroup;\n    const finalRolledUpActions = measuredActions.rolledUp.reduce((memo, action) => {\n      memo.push(...(isMenuGroup(action) ? action.actions : [action]));\n      return memo;\n    }, []);\n\n    if (!isDefaultGroup && !isLastMenuGroup) {\n      // Render a normal MenuGroup with just its actions\n      return /*#__PURE__*/React$1.createElement(MenuGroup$1, Object.assign({\n        key: title,\n        title: title,\n        active: title === activeMenuGroup,\n        actions: groupActions\n      }, rest, {\n        onOpen: handleMenuGroupToggle,\n        onClose: handleMenuGroupClose,\n        getOffsetWidth: handleActionsOffsetWidth\n      }));\n    } else if (!isDefaultGroup && isLastMenuGroup) {\n      // render the last, rollup group with its actions and finalRolledupActions\n      return /*#__PURE__*/React$1.createElement(MenuGroup$1, Object.assign({\n        key: title,\n        title: title,\n        active: title === activeMenuGroup,\n        actions: [...finalRolledUpActions, ...groupActions]\n      }, rest, {\n        onOpen: handleMenuGroupToggle,\n        onClose: handleMenuGroupClose,\n        getOffsetWidth: handleActionsOffsetWidth\n      }));\n    } else if (isDefaultGroup && groups.length === 0 && finalRolledUpActions.length) {\n      // Render the default group to rollup into if one does not exist\n      return /*#__PURE__*/React$1.createElement(MenuGroup$1, Object.assign({\n        key: title,\n        title: title,\n        active: title === activeMenuGroup,\n        actions: finalRolledUpActions\n      }, rest, {\n        onOpen: handleMenuGroupToggle,\n        onClose: handleMenuGroupClose,\n        getOffsetWidth: handleActionsOffsetWidth\n      }));\n    }\n  });\n  const groupedActionsMarkup = /*#__PURE__*/React$1.createElement(ButtonGroup$1, {\n    spacing: \"extraTight\"\n  }, rollUppableActionsMarkup, actionsMarkup, groupsMarkup);\n  return /*#__PURE__*/React$1.createElement(\"div\", {\n    className: styles.ActionsLayout,\n    ref: actionsLayoutRef\n  }, groupedActionsMarkup, /*#__PURE__*/React$1.createElement(EventListener$1, {\n    event: \"resize\",\n    handler: handleResize\n  }));\n}\n\nfunction isMenuGroup(actionOrMenuGroup) {\n  return 'title' in actionOrMenuGroup;\n}\n\nexport { Actions };","map":{"version":3,"sources":["/Users/yewonkwak/Documents/GitHub/spacestagram/node_modules/@shopify/polaris/dist/esm/components/ActionMenu/components/Actions/Actions.js"],"names":["React$1","useRef","useState","useCallback","useMemo","useEffect","objectWithoutProperties","_objectWithoutProperties","debounce$1","EventListener","EventListener$1","useI18n","ButtonGroup","ButtonGroup$1","SecondaryAction","SecondaryAction$1","MenuGroup","MenuGroup$1","styles","ACTION_SPACING","Actions","actions","groups","i18n","actionsLayoutRef","menuGroupWidthRef","availableWidthRef","actionsAndGroupsLengthRef","timesMeasured","actionWidthsRef","activeMenuGroup","setActiveMenuGroup","undefined","measuredActions","setMeasuredActions","showable","rolledUp","defaultRollupGroup","title","translate","lastMenuGroup","pop","lastMenuGroupWidth","current","handleActionsOffsetWidth","width","handleMenuGroupToggle","group","handleMenuGroupClose","updateActions","actionsAndGroups","length","slice","measureActions","currentAvailableWidth","newShowableActions","newRolledUpActions","forEach","action","index","canFitAction","handleResize","offsetWidth","leading","trailing","actionsMarkup","map","includes","content","onAction","rest","createElement","Object","assign","key","onClick","getOffsetWidth","rollUppableActionsMarkup","filteredGroups","filter","some","rolledUpGroup","isMenuGroup","groupsMarkup","groupActions","isDefaultGroup","isLastMenuGroup","finalRolledUpActions","reduce","memo","push","active","onOpen","onClose","groupedActionsMarkup","spacing","className","ActionsLayout","ref","event","handler","actionOrMenuGroup"],"mappings":"AAAA,OAAOA,OAAP,IAAkBC,MAAlB,EAA0BC,QAA1B,EAAoCC,WAApC,EAAiDC,OAAjD,EAA0DC,SAA1D,QAA2E,OAA3E;AACA,SAASC,uBAAuB,IAAIC,wBAApC,QAAoE,mDAApE;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,SAASC,aAAa,IAAIC,eAA1B,QAAiD,yCAAjD;AACA,SAASC,OAAT,QAAwB,qCAAxB;AACA,SAASC,WAAW,IAAIC,aAAxB,QAA6C,qCAA7C;AACA,SAASC,eAAe,IAAIC,iBAA5B,QAAqD,uCAArD;AACA,SAASC,SAAS,IAAIC,WAAtB,QAAyC,2BAAzC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,cAAc,GAAG,CAAvB;;AACA,SAASC,OAAT,OAGG;AAAA,MAHc;AACfC,IAAAA,OAAO,GAAG,EADK;AAEfC,IAAAA,MAAM,GAAG;AAFM,GAGd;AACD,QAAMC,IAAI,GAAGZ,OAAO,EAApB;AACA,QAAMa,gBAAgB,GAAGvB,MAAM,CAAC,IAAD,CAA/B;AACA,QAAMwB,iBAAiB,GAAGxB,MAAM,CAAC,CAAD,CAAhC;AACA,QAAMyB,iBAAiB,GAAGzB,MAAM,CAAC,CAAD,CAAhC;AACA,QAAM0B,yBAAyB,GAAG1B,MAAM,CAAC,CAAD,CAAxC;AACA,QAAM2B,aAAa,GAAG3B,MAAM,CAAC,CAAD,CAA5B;AACA,QAAM4B,eAAe,GAAG5B,MAAM,CAAC,EAAD,CAA9B;AACA,QAAM,CAAC6B,eAAD,EAAkBC,kBAAlB,IAAwC7B,QAAQ,CAAC8B,SAAD,CAAtD;AACA,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwChC,QAAQ,CAAC;AACrDiC,IAAAA,QAAQ,EAAE,EAD2C;AAErDC,IAAAA,QAAQ,EAAE;AAF2C,GAAD,CAAtD;AAIA,QAAMC,kBAAkB,GAAG;AACzBC,IAAAA,KAAK,EAAEf,IAAI,CAACgB,SAAL,CAAe,6BAAf,CADkB;AAEzBlB,IAAAA,OAAO,EAAE;AAFgB,GAA3B;AAIA,QAAMmB,aAAa,GAAG,CAAC,GAAGlB,MAAJ,EAAYmB,GAAZ,EAAtB;AACA,QAAMC,kBAAkB,GAAG,CAAC,GAAGb,eAAe,CAACc,OAApB,EAA6BF,GAA7B,MAAsC,CAAjE;AACA,QAAMG,wBAAwB,GAAGzC,WAAW,CAAC0C,KAAK,IAAI;AACpDhB,IAAAA,eAAe,CAACc,OAAhB,GAA0B,CAAC,GAAGd,eAAe,CAACc,OAApB,EAA6BE,KAA7B,CAA1B;AACD,GAF2C,EAEzC,EAFyC,CAA5C;AAGA,QAAMC,qBAAqB,GAAG3C,WAAW,CAAC4C,KAAK,IAAIhB,kBAAkB,CAACD,eAAe,GAAGE,SAAH,GAAee,KAA/B,CAA5B,EAAmE,CAACjB,eAAD,CAAnE,CAAzC;AACA,QAAMkB,oBAAoB,GAAG7C,WAAW,CAAC,MAAM4B,kBAAkB,CAACC,SAAD,CAAzB,EAAsC,EAAtC,CAAxC;AACA,QAAMiB,aAAa,GAAG9C,WAAW,CAAC,MAAM;AACtC,QAAI+C,gBAAgB,GAAG,CAAC,GAAG7B,OAAJ,EAAa,GAAGC,MAAhB,CAAvB;;AAEA,QAAIA,MAAM,CAAC6B,MAAP,GAAgB,CAApB,EAAuB;AACrB;AACA;AACAD,MAAAA,gBAAgB,GAAG,CAAC,GAAGA,gBAAJ,EAAsBE,KAAtB,CAA4B,CAA5B,EAA+BF,gBAAgB,CAACC,MAAjB,GAA0B,CAAzD,CAAnB;AACD;;AAED,UAAMhB,QAAQ,GAAGe,gBAAgB,CAACE,KAAjB,CAAuB,CAAvB,EAA0BnB,eAAe,CAACE,QAAhB,CAAyBgB,MAAnD,CAAjB;AACA,UAAMf,QAAQ,GAAGc,gBAAgB,CAACE,KAAjB,CAAuBnB,eAAe,CAACE,QAAhB,CAAyBgB,MAAhD,EAAwDD,gBAAgB,CAACC,MAAzE,CAAjB;AACAjB,IAAAA,kBAAkB,CAAC;AACjBC,MAAAA,QADiB;AAEjBC,MAAAA;AAFiB,KAAD,CAAlB;AAID,GAfgC,EAe9B,CAACf,OAAD,EAAUC,MAAV,EAAkBW,eAAe,CAACE,QAAhB,CAAyBgB,MAA3C,CAf8B,CAAjC;AAgBA,QAAME,cAAc,GAAGlD,WAAW,CAAC,MAAM;AACvC,QAAI0B,eAAe,CAACc,OAAhB,CAAwBQ,MAAxB,KAAmC,CAAnC,IAAwCzB,iBAAiB,CAACiB,OAAlB,KAA8B,CAA1E,EAA6E;AAC3E;AACD;;AAED,UAAMO,gBAAgB,GAAG,CAAC,GAAG7B,OAAJ,EAAa,GAAGC,MAAhB,CAAzB;;AAEA,QAAI4B,gBAAgB,CAACC,MAAjB,KAA4B,CAAhC,EAAmC;AACjCjB,MAAAA,kBAAkB,CAAC;AACjBC,QAAAA,QAAQ,EAAEe,gBADO;AAEjBd,QAAAA,QAAQ,EAAE;AAFO,OAAD,CAAlB;AAIA;AACD;;AAED,QAAIkB,qBAAqB,GAAG5B,iBAAiB,CAACiB,OAA9C;AACA,QAAIY,kBAAkB,GAAG,EAAzB;AACA,QAAIC,kBAAkB,GAAG,EAAzB;AACAN,IAAAA,gBAAgB,CAACO,OAAjB,CAAyB,CAACC,MAAD,EAASC,KAAT,KAAmB;AAC1C,YAAMC,YAAY,GAAG/B,eAAe,CAACc,OAAhB,CAAwBgB,KAAxB,IAAiClC,iBAAiB,CAACkB,OAAnD,GAA6DxB,cAA7D,GAA8EuB,kBAA9E,IAAoGY,qBAAzH;;AAEA,UAAIM,YAAJ,EAAkB;AAChBN,QAAAA,qBAAqB,IAAIzB,eAAe,CAACc,OAAhB,CAAwBgB,KAAxB,IAAiCxC,cAAc,GAAG,CAA3E;AACAoC,QAAAA,kBAAkB,GAAG,CAAC,GAAGA,kBAAJ,EAAwBG,MAAxB,CAArB;AACD,OAHD,MAGO;AACLJ,QAAAA,qBAAqB,GAAG,CAAxB,CADK,CACsB;;AAE3B,YAAII,MAAM,KAAKlB,aAAf,EAA8B;AAC9BgB,QAAAA,kBAAkB,GAAG,CAAC,GAAGA,kBAAJ,EAAwBE,MAAxB,CAArB;AACD;AACF,KAZD;AAaAxB,IAAAA,kBAAkB,CAAC;AACjBC,MAAAA,QAAQ,EAAEoB,kBADO;AAEjBnB,MAAAA,QAAQ,EAAEoB;AAFO,KAAD,CAAlB;AAIA5B,IAAAA,aAAa,CAACe,OAAd,IAAyB,CAAzB;AACAhB,IAAAA,yBAAyB,CAACgB,OAA1B,GAAoCO,gBAAgB,CAACC,MAArD;AACD,GArCiC,EAqC/B,CAAC9B,OAAD,EAAUC,MAAV,EAAkBkB,aAAlB,EAAiCE,kBAAjC,CArC+B,CAAlC;AAsCA,QAAMmB,YAAY,GAAGzD,OAAO,CAAC,MAAMI,UAAU,CAAC,MAAM;AAClD,QAAI,CAACgB,gBAAgB,CAACmB,OAAtB,EAA+B;AAC/BjB,IAAAA,iBAAiB,CAACiB,OAAlB,GAA4BnB,gBAAgB,CAACmB,OAAjB,CAAyBmB,WAArD,CAFkD,CAEgB;;AAElElC,IAAAA,aAAa,CAACe,OAAd,GAAwB,CAAxB;AACAU,IAAAA,cAAc;AACf,GAN4C,EAM1C,EAN0C,EAMtC;AACLU,IAAAA,OAAO,EAAE,KADJ;AAELC,IAAAA,QAAQ,EAAE;AAFL,GANsC,CAAjB,EASxB,CAACX,cAAD,CATwB,CAA5B;AAUAhD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACmB,gBAAgB,CAACmB,OAAtB,EAA+B;AAC7B;AACD;;AAEDjB,IAAAA,iBAAiB,CAACiB,OAAlB,GAA4BnB,gBAAgB,CAACmB,OAAjB,CAAyBmB,WAArD;;AAEA,SAAK;AACL;AACAlC,IAAAA,aAAa,CAACe,OAAd,IAAyB,CAAzB,IAA8B,CAAC,GAAGtB,OAAJ,EAAa,GAAGC,MAAhB,EAAwB6B,MAAxB,KAAmCxB,yBAAyB,CAACgB,OAF3F,EAEoG;AAClGM,MAAAA,aAAa;AACb;AACD;;AAEDI,IAAAA,cAAc;AACf,GAfQ,EAeN,CAAChC,OAAD,EAAUC,MAAV,EAAkB+B,cAAlB,EAAkCJ,aAAlC,CAfM,CAAT;AAgBA,QAAMgB,aAAa,GAAG5C,OAAO,CAAC6C,GAAR,CAAYR,MAAM,IAAI;AAC1C,QAAIzB,eAAe,CAACE,QAAhB,CAAyBgB,MAAzB,GAAkC,CAAlC,IAAuClB,eAAe,CAACG,QAAhB,CAAyB+B,QAAzB,CAAkCT,MAAlC,CAA3C,EAAsF,OAAO,IAAP;;AAEtF,UAAM;AACJU,MAAAA,OADI;AAEJC,MAAAA;AAFI,QAGFX,MAHJ;AAAA,UAIMY,IAAI,GAAG/D,wBAAwB,CAACmD,MAAD,EAAS,CAAC,SAAD,EAAY,UAAZ,CAAT,CAJrC;;AAMA,WAAO,aAAa1D,OAAO,CAACuE,aAAR,CAAsBxD,iBAAtB,EAAyCyD,MAAM,CAACC,MAAP,CAAc;AACzEC,MAAAA,GAAG,EAAEN,OADoE;AAEzEO,MAAAA,OAAO,EAAEN;AAFgE,KAAd,EAG1DC,IAH0D,EAGpD;AACPM,MAAAA,cAAc,EAAEhC;AADT,KAHoD,CAAzC,EAKhBwB,OALgB,CAApB;AAMD,GAfqB,CAAtB;AAgBA,QAAMS,wBAAwB,GAAG5C,eAAe,CAACE,QAAhB,CAAyBgB,MAAzB,GAAkC,CAAlC,GAAsClB,eAAe,CAACE,QAAhB,CAAyB+B,GAAzB,CAA6BR,MAAM,IAAIA,MAAM,CAACU,OAAP,IAAkB,aAAapE,OAAO,CAACuE,aAAR,CAAsBxD,iBAAtB,EAAyCyD,MAAM,CAACC,MAAP,CAAc;AAClMC,IAAAA,GAAG,EAAEhB,MAAM,CAACU;AADsL,GAAd,EAEnLV,MAFmL,EAE3K;AACTkB,IAAAA,cAAc,EAAEhC;AADP,GAF2K,CAAzC,EAIzIc,MAAM,CAACU,OAJkI,CAAtE,CAAtC,GAIV,IAJvB;AAKA,QAAMU,cAAc,GAAG,CAAC,GAAGxD,MAAJ,EAAYe,kBAAZ,EAAgC0C,MAAhC,CAAuChC,KAAK,IAAI;AACrE,WAAOzB,MAAM,CAAC6B,MAAP,KAAkB,CAAlB,GAAsBJ,KAAtB,GAA8BA,KAAK,KAAKP,aAAV,IAA2B,CAACP,eAAe,CAACG,QAAhB,CAAyB4C,IAAzB,CAA8BC,aAAa,IAAIC,WAAW,CAACD,aAAD,CAAX,IAA8BA,aAAa,CAAC3C,KAAd,KAAwBS,KAAK,CAACT,KAA3G,CAAjE;AACD,GAFsB,CAAvB;AAGA,QAAM6C,YAAY,GAAGL,cAAc,CAACZ,GAAf,CAAmBnB,KAAK,IAAI;AAC/C,UAAM;AACJT,MAAAA,KADI;AAEJjB,MAAAA,OAAO,EAAE+D;AAFL,QAGFrC,KAHJ;AAAA,UAIMuB,IAAI,GAAG/D,wBAAwB,CAACwC,KAAD,EAAQ,CAAC,OAAD,EAAU,SAAV,CAAR,CAJrC;;AAMA,UAAMsC,cAAc,GAAGtC,KAAK,KAAKV,kBAAjC;AACA,UAAMiD,eAAe,GAAGvC,KAAK,KAAKP,aAAlC;AACA,UAAM+C,oBAAoB,GAAGtD,eAAe,CAACG,QAAhB,CAAyBoD,MAAzB,CAAgC,CAACC,IAAD,EAAO/B,MAAP,KAAkB;AAC7E+B,MAAAA,IAAI,CAACC,IAAL,CAAU,IAAIR,WAAW,CAACxB,MAAD,CAAX,GAAsBA,MAAM,CAACrC,OAA7B,GAAuC,CAACqC,MAAD,CAA3C,CAAV;AACA,aAAO+B,IAAP;AACD,KAH4B,EAG1B,EAH0B,CAA7B;;AAKA,QAAI,CAACJ,cAAD,IAAmB,CAACC,eAAxB,EAAyC;AACvC;AACA,aAAO,aAAatF,OAAO,CAACuE,aAAR,CAAsBtD,WAAtB,EAAmCuD,MAAM,CAACC,MAAP,CAAc;AACnEC,QAAAA,GAAG,EAAEpC,KAD8D;AAEnEA,QAAAA,KAAK,EAAEA,KAF4D;AAGnEqD,QAAAA,MAAM,EAAErD,KAAK,KAAKR,eAHiD;AAInET,QAAAA,OAAO,EAAE+D;AAJ0D,OAAd,EAKpDd,IALoD,EAK9C;AACPsB,QAAAA,MAAM,EAAE9C,qBADD;AAEP+C,QAAAA,OAAO,EAAE7C,oBAFF;AAGP4B,QAAAA,cAAc,EAAEhC;AAHT,OAL8C,CAAnC,CAApB;AAUD,KAZD,MAYO,IAAI,CAACyC,cAAD,IAAmBC,eAAvB,EAAwC;AAC7C;AACA,aAAO,aAAatF,OAAO,CAACuE,aAAR,CAAsBtD,WAAtB,EAAmCuD,MAAM,CAACC,MAAP,CAAc;AACnEC,QAAAA,GAAG,EAAEpC,KAD8D;AAEnEA,QAAAA,KAAK,EAAEA,KAF4D;AAGnEqD,QAAAA,MAAM,EAAErD,KAAK,KAAKR,eAHiD;AAInET,QAAAA,OAAO,EAAE,CAAC,GAAGkE,oBAAJ,EAA0B,GAAGH,YAA7B;AAJ0D,OAAd,EAKpDd,IALoD,EAK9C;AACPsB,QAAAA,MAAM,EAAE9C,qBADD;AAEP+C,QAAAA,OAAO,EAAE7C,oBAFF;AAGP4B,QAAAA,cAAc,EAAEhC;AAHT,OAL8C,CAAnC,CAApB;AAUD,KAZM,MAYA,IAAIyC,cAAc,IAAI/D,MAAM,CAAC6B,MAAP,KAAkB,CAApC,IAAyCoC,oBAAoB,CAACpC,MAAlE,EAA0E;AAC/E;AACA,aAAO,aAAanD,OAAO,CAACuE,aAAR,CAAsBtD,WAAtB,EAAmCuD,MAAM,CAACC,MAAP,CAAc;AACnEC,QAAAA,GAAG,EAAEpC,KAD8D;AAEnEA,QAAAA,KAAK,EAAEA,KAF4D;AAGnEqD,QAAAA,MAAM,EAAErD,KAAK,KAAKR,eAHiD;AAInET,QAAAA,OAAO,EAAEkE;AAJ0D,OAAd,EAKpDjB,IALoD,EAK9C;AACPsB,QAAAA,MAAM,EAAE9C,qBADD;AAEP+C,QAAAA,OAAO,EAAE7C,oBAFF;AAGP4B,QAAAA,cAAc,EAAEhC;AAHT,OAL8C,CAAnC,CAApB;AAUD;AACF,GAnDoB,CAArB;AAoDA,QAAMkD,oBAAoB,GAAG,aAAa9F,OAAO,CAACuE,aAAR,CAAsB1D,aAAtB,EAAqC;AAC7EkF,IAAAA,OAAO,EAAE;AADoE,GAArC,EAEvClB,wBAFuC,EAEbZ,aAFa,EAEEkB,YAFF,CAA1C;AAGA,SAAO,aAAanF,OAAO,CAACuE,aAAR,CAAsB,KAAtB,EAA6B;AAC/CyB,IAAAA,SAAS,EAAE9E,MAAM,CAAC+E,aAD6B;AAE/CC,IAAAA,GAAG,EAAE1E;AAF0C,GAA7B,EAGjBsE,oBAHiB,EAGK,aAAa9F,OAAO,CAACuE,aAAR,CAAsB7D,eAAtB,EAAuC;AAC3EyF,IAAAA,KAAK,EAAE,QADoE;AAE3EC,IAAAA,OAAO,EAAEvC;AAFkE,GAAvC,CAHlB,CAApB;AAOD;;AAED,SAASqB,WAAT,CAAqBmB,iBAArB,EAAwC;AACtC,SAAO,WAAWA,iBAAlB;AACD;;AAED,SAASjF,OAAT","sourcesContent":["import React$1, { useRef, useState, useCallback, useMemo, useEffect } from 'react';\nimport { objectWithoutProperties as _objectWithoutProperties } from '../../../../_virtual/_rollupPluginBabelHelpers.js';\nimport debounce$1 from 'lodash/debounce';\nimport { EventListener as EventListener$1 } from '../../../EventListener/EventListener.js';\nimport { useI18n } from '../../../../utilities/i18n/hooks.js';\nimport { ButtonGroup as ButtonGroup$1 } from '../../../ButtonGroup/ButtonGroup.js';\nimport { SecondaryAction as SecondaryAction$1 } from '../SecondaryAction/SecondaryAction.js';\nimport { MenuGroup as MenuGroup$1 } from '../MenuGroup/MenuGroup.js';\nimport styles from './Actions.scss.js';\n\nconst ACTION_SPACING = 8;\nfunction Actions({\n  actions = [],\n  groups = []\n}) {\n  const i18n = useI18n();\n  const actionsLayoutRef = useRef(null);\n  const menuGroupWidthRef = useRef(0);\n  const availableWidthRef = useRef(0);\n  const actionsAndGroupsLengthRef = useRef(0);\n  const timesMeasured = useRef(0);\n  const actionWidthsRef = useRef([]);\n  const [activeMenuGroup, setActiveMenuGroup] = useState(undefined);\n  const [measuredActions, setMeasuredActions] = useState({\n    showable: [],\n    rolledUp: []\n  });\n  const defaultRollupGroup = {\n    title: i18n.translate('Polaris.Actions.moreActions'),\n    actions: []\n  };\n  const lastMenuGroup = [...groups].pop();\n  const lastMenuGroupWidth = [...actionWidthsRef.current].pop() || 0;\n  const handleActionsOffsetWidth = useCallback(width => {\n    actionWidthsRef.current = [...actionWidthsRef.current, width];\n  }, []);\n  const handleMenuGroupToggle = useCallback(group => setActiveMenuGroup(activeMenuGroup ? undefined : group), [activeMenuGroup]);\n  const handleMenuGroupClose = useCallback(() => setActiveMenuGroup(undefined), []);\n  const updateActions = useCallback(() => {\n    let actionsAndGroups = [...actions, ...groups];\n\n    if (groups.length > 0) {\n      // We don't want to include actions from the last group\n      // since it is always rendered with its own actions\n      actionsAndGroups = [...actionsAndGroups].slice(0, actionsAndGroups.length - 1);\n    }\n\n    const showable = actionsAndGroups.slice(0, measuredActions.showable.length);\n    const rolledUp = actionsAndGroups.slice(measuredActions.showable.length, actionsAndGroups.length);\n    setMeasuredActions({\n      showable,\n      rolledUp\n    });\n  }, [actions, groups, measuredActions.showable.length]);\n  const measureActions = useCallback(() => {\n    if (actionWidthsRef.current.length === 0 || availableWidthRef.current === 0) {\n      return;\n    }\n\n    const actionsAndGroups = [...actions, ...groups];\n\n    if (actionsAndGroups.length === 1) {\n      setMeasuredActions({\n        showable: actionsAndGroups,\n        rolledUp: []\n      });\n      return;\n    }\n\n    let currentAvailableWidth = availableWidthRef.current;\n    let newShowableActions = [];\n    let newRolledUpActions = [];\n    actionsAndGroups.forEach((action, index) => {\n      const canFitAction = actionWidthsRef.current[index] + menuGroupWidthRef.current + ACTION_SPACING + lastMenuGroupWidth <= currentAvailableWidth;\n\n      if (canFitAction) {\n        currentAvailableWidth -= actionWidthsRef.current[index] + ACTION_SPACING * 2;\n        newShowableActions = [...newShowableActions, action];\n      } else {\n        currentAvailableWidth = 0; // Find last group if it exists and always render it as a rolled up action below\n\n        if (action === lastMenuGroup) return;\n        newRolledUpActions = [...newRolledUpActions, action];\n      }\n    });\n    setMeasuredActions({\n      showable: newShowableActions,\n      rolledUp: newRolledUpActions\n    });\n    timesMeasured.current += 1;\n    actionsAndGroupsLengthRef.current = actionsAndGroups.length;\n  }, [actions, groups, lastMenuGroup, lastMenuGroupWidth]);\n  const handleResize = useMemo(() => debounce$1(() => {\n    if (!actionsLayoutRef.current) return;\n    availableWidthRef.current = actionsLayoutRef.current.offsetWidth; // Set timesMeasured to 0 to allow re-measuring\n\n    timesMeasured.current = 0;\n    measureActions();\n  }, 50, {\n    leading: false,\n    trailing: true\n  }), [measureActions]);\n  useEffect(() => {\n    if (!actionsLayoutRef.current) {\n      return;\n    }\n\n    availableWidthRef.current = actionsLayoutRef.current.offsetWidth;\n\n    if ( // Allow measuring twice\n    // This accounts for the initial paint and re-flow\n    timesMeasured.current >= 2 && [...actions, ...groups].length === actionsAndGroupsLengthRef.current) {\n      updateActions();\n      return;\n    }\n\n    measureActions();\n  }, [actions, groups, measureActions, updateActions]);\n  const actionsMarkup = actions.map(action => {\n    if (measuredActions.showable.length > 0 || measuredActions.rolledUp.includes(action)) return null;\n\n    const {\n      content,\n      onAction\n    } = action,\n          rest = _objectWithoutProperties(action, [\"content\", \"onAction\"]);\n\n    return /*#__PURE__*/React$1.createElement(SecondaryAction$1, Object.assign({\n      key: content,\n      onClick: onAction\n    }, rest, {\n      getOffsetWidth: handleActionsOffsetWidth\n    }), content);\n  });\n  const rollUppableActionsMarkup = measuredActions.showable.length > 0 ? measuredActions.showable.map(action => action.content && /*#__PURE__*/React$1.createElement(SecondaryAction$1, Object.assign({\n    key: action.content\n  }, action, {\n    getOffsetWidth: handleActionsOffsetWidth\n  }), action.content)) : null;\n  const filteredGroups = [...groups, defaultRollupGroup].filter(group => {\n    return groups.length === 0 ? group : group === lastMenuGroup || !measuredActions.rolledUp.some(rolledUpGroup => isMenuGroup(rolledUpGroup) && rolledUpGroup.title === group.title);\n  });\n  const groupsMarkup = filteredGroups.map(group => {\n    const {\n      title,\n      actions: groupActions\n    } = group,\n          rest = _objectWithoutProperties(group, [\"title\", \"actions\"]);\n\n    const isDefaultGroup = group === defaultRollupGroup;\n    const isLastMenuGroup = group === lastMenuGroup;\n    const finalRolledUpActions = measuredActions.rolledUp.reduce((memo, action) => {\n      memo.push(...(isMenuGroup(action) ? action.actions : [action]));\n      return memo;\n    }, []);\n\n    if (!isDefaultGroup && !isLastMenuGroup) {\n      // Render a normal MenuGroup with just its actions\n      return /*#__PURE__*/React$1.createElement(MenuGroup$1, Object.assign({\n        key: title,\n        title: title,\n        active: title === activeMenuGroup,\n        actions: groupActions\n      }, rest, {\n        onOpen: handleMenuGroupToggle,\n        onClose: handleMenuGroupClose,\n        getOffsetWidth: handleActionsOffsetWidth\n      }));\n    } else if (!isDefaultGroup && isLastMenuGroup) {\n      // render the last, rollup group with its actions and finalRolledupActions\n      return /*#__PURE__*/React$1.createElement(MenuGroup$1, Object.assign({\n        key: title,\n        title: title,\n        active: title === activeMenuGroup,\n        actions: [...finalRolledUpActions, ...groupActions]\n      }, rest, {\n        onOpen: handleMenuGroupToggle,\n        onClose: handleMenuGroupClose,\n        getOffsetWidth: handleActionsOffsetWidth\n      }));\n    } else if (isDefaultGroup && groups.length === 0 && finalRolledUpActions.length) {\n      // Render the default group to rollup into if one does not exist\n      return /*#__PURE__*/React$1.createElement(MenuGroup$1, Object.assign({\n        key: title,\n        title: title,\n        active: title === activeMenuGroup,\n        actions: finalRolledUpActions\n      }, rest, {\n        onOpen: handleMenuGroupToggle,\n        onClose: handleMenuGroupClose,\n        getOffsetWidth: handleActionsOffsetWidth\n      }));\n    }\n  });\n  const groupedActionsMarkup = /*#__PURE__*/React$1.createElement(ButtonGroup$1, {\n    spacing: \"extraTight\"\n  }, rollUppableActionsMarkup, actionsMarkup, groupsMarkup);\n  return /*#__PURE__*/React$1.createElement(\"div\", {\n    className: styles.ActionsLayout,\n    ref: actionsLayoutRef\n  }, groupedActionsMarkup, /*#__PURE__*/React$1.createElement(EventListener$1, {\n    event: \"resize\",\n    handler: handleResize\n  }));\n}\n\nfunction isMenuGroup(actionOrMenuGroup) {\n  return 'title' in actionOrMenuGroup;\n}\n\nexport { Actions };\n"]},"metadata":{},"sourceType":"module"}