{"ast":null,"code":"import React$1, { memo, useRef, useState, useCallback } from 'react';\nimport { useI18n } from '../../../../../../utilities/i18n/hooks.js';\nimport { CalendarMinor } from '@shopify/polaris-icons';\nimport { Icon as Icon$1 } from '../../../../../Icon/Icon.js';\nimport { TextField } from '../../../../../TextField/TextField.js';\nimport { DatePicker as DatePicker$1 } from '../../../../../DatePicker/DatePicker.js';\nimport { Select as Select$1 } from '../../../../../Select/Select.js';\nimport styles from './DateSelector.scss.js';\nconst VALID_DATE_REGEX = /^\\d{4}-\\d{1,2}-\\d{1,2}$/;\nlet DateFilterOption;\n\n(function (DateFilterOption) {\n  DateFilterOption[\"PastWeek\"] = \"past_week\";\n  DateFilterOption[\"PastMonth\"] = \"past_month\";\n  DateFilterOption[\"PastQuarter\"] = \"past_quarter\";\n  DateFilterOption[\"PastYear\"] = \"past_year\";\n  DateFilterOption[\"ComingWeek\"] = \"coming_week\";\n  DateFilterOption[\"ComingMonth\"] = \"coming_month\";\n  DateFilterOption[\"ComingQuarter\"] = \"coming_quarter\";\n  DateFilterOption[\"ComingYear\"] = \"coming_year\";\n  DateFilterOption[\"OnOrBefore\"] = \"on_or_before\";\n  DateFilterOption[\"OnOrAfter\"] = \"on_or_after\";\n})(DateFilterOption || (DateFilterOption = {}));\n\nvar _ref = /*#__PURE__*/React$1.createElement(Icon$1, {\n  source: CalendarMinor,\n  color: \"subdued\"\n});\n\nconst DateSelector = /*#__PURE__*/memo(function DateSelector(_ref2) {\n  let {\n    filterValue,\n    filterKey,\n    filterMinKey,\n    filterMaxKey,\n    dateOptionType,\n    onFilterValueChange,\n    onFilterKeyChange\n  } = _ref2;\n  const now = new Date();\n  const i18n = useI18n();\n  const initialConsumerFilterKey = useRef(filterKey);\n  const [datePickerMonth, setDatePickerMonth] = useState(now.getMonth());\n  const [datePickerYear, setDatePickerYear] = useState(now.getFullYear());\n  const [selectedDate, setSelectedDate] = useState();\n  const [userInputDate, setUserInputDate] = useState();\n  const [userInputDateError, setUserInputDateError] = useState();\n  const dateTextFieldValue = getDateTextFieldValue();\n  const handleDateFieldChange = useCallback(value => {\n    if (value.length === 0) {\n      setSelectedDate(undefined);\n      onFilterValueChange(undefined);\n    }\n\n    if (userInputDateError && isValidDate(value)) {\n      setUserInputDateError(undefined);\n    }\n\n    setUserInputDate(value);\n  }, [onFilterValueChange, userInputDateError]);\n  const handleDateChanged = useCallback(date => {\n    if (!date) {\n      return;\n    }\n\n    onFilterValueChange(stripTimeFromISOString(formatDateForLocalTimezone(date)));\n  }, [onFilterValueChange]);\n  const handleDateBlur = useCallback(() => {\n    if (!dateTextFieldValue || !isValidDate(dateTextFieldValue)) {\n      setSelectedDate(undefined);\n      setUserInputDateError(i18n.translate('Polaris.ResourceList.DateSelector.dateValueError'));\n      onFilterValueChange(undefined);\n      return;\n    }\n\n    if (!userInputDate) {\n      return;\n    }\n\n    const formattedDateForTimezone = new Date(formatDateForLocalTimezone(new Date(userInputDate)));\n    setSelectedDate(formattedDateForTimezone);\n    setDatePickerMonth(formattedDateForTimezone.getMonth());\n    setDatePickerYear(formattedDateForTimezone.getFullYear());\n    setUserInputDate(undefined);\n    setUserInputDateError(undefined);\n    handleDateChanged(formattedDateForTimezone);\n  }, [dateTextFieldValue, handleDateChanged, i18n, onFilterValueChange, userInputDate]);\n  const handleDateFilterOptionsChange = useCallback(newOption => {\n    if (!initialConsumerFilterKey.current) {\n      return;\n    }\n\n    if (newOption === DateFilterOption.OnOrBefore) {\n      onFilterKeyChange(filterMaxKey);\n      onFilterValueChange(selectedDate ? stripTimeFromISOString(formatDateForLocalTimezone(selectedDate)) : undefined);\n      return;\n    }\n\n    if (newOption === DateFilterOption.OnOrAfter) {\n      onFilterKeyChange(filterMinKey);\n      onFilterValueChange(selectedDate ? stripTimeFromISOString(formatDateForLocalTimezone(selectedDate)) : undefined);\n      return;\n    }\n\n    onFilterKeyChange(initialConsumerFilterKey.current);\n    onFilterValueChange(newOption);\n  }, [filterMaxKey, filterMinKey, initialConsumerFilterKey, onFilterKeyChange, onFilterValueChange, selectedDate]);\n  const handleDatePickerChange = useCallback(_ref3 => {\n    let {\n      end: nextDate\n    } = _ref3;\n    const date = new Date(nextDate);\n    setSelectedDate(date);\n    setUserInputDate(undefined);\n    setUserInputDateError(undefined);\n    handleDateChanged(date);\n  }, [handleDateChanged]);\n  const handleDatePickerMonthChange = useCallback((month, year) => {\n    setDatePickerMonth(month);\n    setDatePickerYear(year);\n  }, []);\n  const dateFilterOption = getDateFilterOption(filterValue, filterKey, filterMinKey, filterMaxKey);\n  const showDatePredicate = dateFilterOption === DateFilterOption.OnOrBefore || dateFilterOption === DateFilterOption.OnOrAfter;\n  const datePredicateMarkup = showDatePredicate && /*#__PURE__*/React$1.createElement(React$1.Fragment, null, /*#__PURE__*/React$1.createElement(\"div\", {\n    className: styles.DateTextField\n  }, /*#__PURE__*/React$1.createElement(TextField, {\n    label: i18n.translate('Polaris.ResourceList.DateSelector.dateValueLabel'),\n    placeholder: i18n.translate('Polaris.ResourceList.DateSelector.dateValuePlaceholder'),\n    value: dateTextFieldValue,\n    error: userInputDateError,\n    prefix: _ref,\n    autoComplete: false,\n    onChange: handleDateFieldChange,\n    onBlur: handleDateBlur\n  })), /*#__PURE__*/React$1.createElement(\"div\", {\n    className: styles.DatePicker\n  }, /*#__PURE__*/React$1.createElement(DatePicker$1, {\n    selected: selectedDate,\n    month: datePickerMonth,\n    year: datePickerYear,\n    onChange: handleDatePickerChange,\n    onMonthChange: handleDatePickerMonthChange\n  })));\n  const dateOptionTypes = {\n    past: [...getDatePastOptions(), ...getDateComparatorOptions()],\n    future: [...getDateFutureOptions(), ...getDateComparatorOptions()],\n    full: [...getDatePastOptions(), ...getDateFutureOptions(), ...getDateComparatorOptions()]\n  };\n  return /*#__PURE__*/React$1.createElement(React$1.Fragment, null, /*#__PURE__*/React$1.createElement(Select$1, {\n    label: i18n.translate('Polaris.ResourceList.DateSelector.SelectOptions.dateFilterLabel'),\n    labelHidden: true,\n    options: dateOptionType ? dateOptionTypes[dateOptionType] : dateOptionTypes.full,\n    placeholder: i18n.translate('Polaris.ResourceList.FilterValueSelector.selectFilterValuePlaceholder'),\n    value: dateFilterOption,\n    onChange: handleDateFilterOptionsChange\n  }), datePredicateMarkup);\n\n  function getDateComparatorOptions() {\n    return [{\n      value: DateFilterOption.OnOrBefore,\n      label: i18n.translate('Polaris.ResourceList.DateSelector.SelectOptions.OnOrBefore')\n    }, {\n      value: DateFilterOption.OnOrAfter,\n      label: i18n.translate('Polaris.ResourceList.DateSelector.SelectOptions.OnOrAfter')\n    }];\n  }\n\n  function getDatePastOptions() {\n    return [{\n      value: DateFilterOption.PastWeek,\n      label: i18n.translate('Polaris.ResourceList.DateSelector.SelectOptions.PastWeek')\n    }, {\n      value: DateFilterOption.PastMonth,\n      label: i18n.translate('Polaris.ResourceList.DateSelector.SelectOptions.PastMonth')\n    }, {\n      value: DateFilterOption.PastQuarter,\n      label: i18n.translate('Polaris.ResourceList.DateSelector.SelectOptions.PastQuarter')\n    }, {\n      value: DateFilterOption.PastYear,\n      label: i18n.translate('Polaris.ResourceList.DateSelector.SelectOptions.PastYear')\n    }];\n  }\n\n  function getDateFutureOptions() {\n    return [{\n      value: DateFilterOption.ComingWeek,\n      label: i18n.translate('Polaris.ResourceList.DateSelector.SelectOptions.ComingWeek')\n    }, {\n      value: DateFilterOption.ComingMonth,\n      label: i18n.translate('Polaris.ResourceList.DateSelector.SelectOptions.ComingMonth')\n    }, {\n      value: DateFilterOption.ComingQuarter,\n      label: i18n.translate('Polaris.ResourceList.DateSelector.SelectOptions.ComingQuarter')\n    }, {\n      value: DateFilterOption.ComingYear,\n      label: i18n.translate('Polaris.ResourceList.DateSelector.SelectOptions.ComingYear')\n    }];\n  }\n\n  function getDateTextFieldValue() {\n    if (!userInputDate && !selectedDate) {\n      return undefined;\n    }\n\n    if (userInputDate !== undefined) {\n      return userInputDate;\n    }\n\n    if (selectedDate) {\n      return stripTimeFromISOString(formatDateForLocalTimezone(selectedDate));\n    }\n  }\n});\n\nfunction isValidDate(date) {\n  if (!date) {\n    return false;\n  }\n\n  return VALID_DATE_REGEX.test(date) && !isNaN(new Date(date).getTime());\n}\n\nfunction getDateFilterOption(filterValue, filterKey, filterMinKey, filterMaxKey) {\n  if (filterKey === filterMaxKey) {\n    return DateFilterOption.OnOrBefore;\n  }\n\n  if (filterKey === filterMinKey) {\n    return DateFilterOption.OnOrAfter;\n  }\n\n  return filterValue;\n}\n\nfunction stripTimeFromISOString(ISOString) {\n  return ISOString.slice(0, 10);\n}\n\nfunction formatDateForLocalTimezone(date) {\n  const timezoneOffset = date.getTimezoneOffset();\n  const timezoneOffsetMs = timezoneOffset * 60 * 1000;\n  const isFringeTimezone = timezoneOffset === -720 || timezoneOffset === 720;\n  const formattedDate = new Date();\n\n  if (isFringeTimezone && date.getHours() !== 0) {\n    return date.toISOString();\n  }\n\n  const newTime = timezoneOffset > -1 ? date.getTime() + timezoneOffsetMs : date.getTime() - timezoneOffsetMs;\n  formattedDate.setTime(newTime);\n  return formattedDate.toISOString();\n}\n\nexport { DateFilterOption, DateSelector };","map":{"version":3,"sources":["/Users/yewonkwak/Documents/GitHub/spacestagram/node_modules/@shopify/polaris/dist/esm/components/ResourceList/components/FilterControl/components/DateSelector/DateSelector.js"],"names":["React$1","memo","useRef","useState","useCallback","useI18n","CalendarMinor","Icon","Icon$1","TextField","DatePicker","DatePicker$1","Select","Select$1","styles","VALID_DATE_REGEX","DateFilterOption","_ref","createElement","source","color","DateSelector","filterValue","filterKey","filterMinKey","filterMaxKey","dateOptionType","onFilterValueChange","onFilterKeyChange","now","Date","i18n","initialConsumerFilterKey","datePickerMonth","setDatePickerMonth","getMonth","datePickerYear","setDatePickerYear","getFullYear","selectedDate","setSelectedDate","userInputDate","setUserInputDate","userInputDateError","setUserInputDateError","dateTextFieldValue","getDateTextFieldValue","handleDateFieldChange","value","length","undefined","isValidDate","handleDateChanged","date","stripTimeFromISOString","formatDateForLocalTimezone","handleDateBlur","translate","formattedDateForTimezone","handleDateFilterOptionsChange","newOption","current","OnOrBefore","OnOrAfter","handleDatePickerChange","end","nextDate","handleDatePickerMonthChange","month","year","dateFilterOption","getDateFilterOption","showDatePredicate","datePredicateMarkup","Fragment","className","DateTextField","label","placeholder","error","prefix","autoComplete","onChange","onBlur","selected","onMonthChange","dateOptionTypes","past","getDatePastOptions","getDateComparatorOptions","future","getDateFutureOptions","full","labelHidden","options","PastWeek","PastMonth","PastQuarter","PastYear","ComingWeek","ComingMonth","ComingQuarter","ComingYear","test","isNaN","getTime","ISOString","slice","timezoneOffset","getTimezoneOffset","timezoneOffsetMs","isFringeTimezone","formattedDate","getHours","toISOString","newTime","setTime"],"mappings":"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","sourcesContent":["import React$1, { memo, useRef, useState, useCallback } from 'react';\nimport { useI18n } from '../../../../../../utilities/i18n/hooks.js';\nimport { CalendarMinor } from '@shopify/polaris-icons';\nimport { Icon as Icon$1 } from '../../../../../Icon/Icon.js';\nimport { TextField } from '../../../../../TextField/TextField.js';\nimport { DatePicker as DatePicker$1 } from '../../../../../DatePicker/DatePicker.js';\nimport { Select as Select$1 } from '../../../../../Select/Select.js';\nimport styles from './DateSelector.scss.js';\n\nconst VALID_DATE_REGEX = /^\\d{4}-\\d{1,2}-\\d{1,2}$/;\nlet DateFilterOption;\n\n(function (DateFilterOption) {\n  DateFilterOption[\"PastWeek\"] = \"past_week\";\n  DateFilterOption[\"PastMonth\"] = \"past_month\";\n  DateFilterOption[\"PastQuarter\"] = \"past_quarter\";\n  DateFilterOption[\"PastYear\"] = \"past_year\";\n  DateFilterOption[\"ComingWeek\"] = \"coming_week\";\n  DateFilterOption[\"ComingMonth\"] = \"coming_month\";\n  DateFilterOption[\"ComingQuarter\"] = \"coming_quarter\";\n  DateFilterOption[\"ComingYear\"] = \"coming_year\";\n  DateFilterOption[\"OnOrBefore\"] = \"on_or_before\";\n  DateFilterOption[\"OnOrAfter\"] = \"on_or_after\";\n})(DateFilterOption || (DateFilterOption = {}));\n\nvar _ref = /*#__PURE__*/React$1.createElement(Icon$1, {\n  source: CalendarMinor,\n  color: \"subdued\"\n});\n\nconst DateSelector = /*#__PURE__*/memo(function DateSelector({\n  filterValue,\n  filterKey,\n  filterMinKey,\n  filterMaxKey,\n  dateOptionType,\n  onFilterValueChange,\n  onFilterKeyChange\n}) {\n  const now = new Date();\n  const i18n = useI18n();\n  const initialConsumerFilterKey = useRef(filterKey);\n  const [datePickerMonth, setDatePickerMonth] = useState(now.getMonth());\n  const [datePickerYear, setDatePickerYear] = useState(now.getFullYear());\n  const [selectedDate, setSelectedDate] = useState();\n  const [userInputDate, setUserInputDate] = useState();\n  const [userInputDateError, setUserInputDateError] = useState();\n  const dateTextFieldValue = getDateTextFieldValue();\n  const handleDateFieldChange = useCallback(value => {\n    if (value.length === 0) {\n      setSelectedDate(undefined);\n      onFilterValueChange(undefined);\n    }\n\n    if (userInputDateError && isValidDate(value)) {\n      setUserInputDateError(undefined);\n    }\n\n    setUserInputDate(value);\n  }, [onFilterValueChange, userInputDateError]);\n  const handleDateChanged = useCallback(date => {\n    if (!date) {\n      return;\n    }\n\n    onFilterValueChange(stripTimeFromISOString(formatDateForLocalTimezone(date)));\n  }, [onFilterValueChange]);\n  const handleDateBlur = useCallback(() => {\n    if (!dateTextFieldValue || !isValidDate(dateTextFieldValue)) {\n      setSelectedDate(undefined);\n      setUserInputDateError(i18n.translate('Polaris.ResourceList.DateSelector.dateValueError'));\n      onFilterValueChange(undefined);\n      return;\n    }\n\n    if (!userInputDate) {\n      return;\n    }\n\n    const formattedDateForTimezone = new Date(formatDateForLocalTimezone(new Date(userInputDate)));\n    setSelectedDate(formattedDateForTimezone);\n    setDatePickerMonth(formattedDateForTimezone.getMonth());\n    setDatePickerYear(formattedDateForTimezone.getFullYear());\n    setUserInputDate(undefined);\n    setUserInputDateError(undefined);\n    handleDateChanged(formattedDateForTimezone);\n  }, [dateTextFieldValue, handleDateChanged, i18n, onFilterValueChange, userInputDate]);\n  const handleDateFilterOptionsChange = useCallback(newOption => {\n    if (!initialConsumerFilterKey.current) {\n      return;\n    }\n\n    if (newOption === DateFilterOption.OnOrBefore) {\n      onFilterKeyChange(filterMaxKey);\n      onFilterValueChange(selectedDate ? stripTimeFromISOString(formatDateForLocalTimezone(selectedDate)) : undefined);\n      return;\n    }\n\n    if (newOption === DateFilterOption.OnOrAfter) {\n      onFilterKeyChange(filterMinKey);\n      onFilterValueChange(selectedDate ? stripTimeFromISOString(formatDateForLocalTimezone(selectedDate)) : undefined);\n      return;\n    }\n\n    onFilterKeyChange(initialConsumerFilterKey.current);\n    onFilterValueChange(newOption);\n  }, [filterMaxKey, filterMinKey, initialConsumerFilterKey, onFilterKeyChange, onFilterValueChange, selectedDate]);\n  const handleDatePickerChange = useCallback(({\n    end: nextDate\n  }) => {\n    const date = new Date(nextDate);\n    setSelectedDate(date);\n    setUserInputDate(undefined);\n    setUserInputDateError(undefined);\n    handleDateChanged(date);\n  }, [handleDateChanged]);\n  const handleDatePickerMonthChange = useCallback((month, year) => {\n    setDatePickerMonth(month);\n    setDatePickerYear(year);\n  }, []);\n  const dateFilterOption = getDateFilterOption(filterValue, filterKey, filterMinKey, filterMaxKey);\n  const showDatePredicate = dateFilterOption === DateFilterOption.OnOrBefore || dateFilterOption === DateFilterOption.OnOrAfter;\n  const datePredicateMarkup = showDatePredicate && /*#__PURE__*/React$1.createElement(React$1.Fragment, null, /*#__PURE__*/React$1.createElement(\"div\", {\n    className: styles.DateTextField\n  }, /*#__PURE__*/React$1.createElement(TextField, {\n    label: i18n.translate('Polaris.ResourceList.DateSelector.dateValueLabel'),\n    placeholder: i18n.translate('Polaris.ResourceList.DateSelector.dateValuePlaceholder'),\n    value: dateTextFieldValue,\n    error: userInputDateError,\n    prefix: _ref,\n    autoComplete: false,\n    onChange: handleDateFieldChange,\n    onBlur: handleDateBlur\n  })), /*#__PURE__*/React$1.createElement(\"div\", {\n    className: styles.DatePicker\n  }, /*#__PURE__*/React$1.createElement(DatePicker$1, {\n    selected: selectedDate,\n    month: datePickerMonth,\n    year: datePickerYear,\n    onChange: handleDatePickerChange,\n    onMonthChange: handleDatePickerMonthChange\n  })));\n  const dateOptionTypes = {\n    past: [...getDatePastOptions(), ...getDateComparatorOptions()],\n    future: [...getDateFutureOptions(), ...getDateComparatorOptions()],\n    full: [...getDatePastOptions(), ...getDateFutureOptions(), ...getDateComparatorOptions()]\n  };\n  return /*#__PURE__*/React$1.createElement(React$1.Fragment, null, /*#__PURE__*/React$1.createElement(Select$1, {\n    label: i18n.translate('Polaris.ResourceList.DateSelector.SelectOptions.dateFilterLabel'),\n    labelHidden: true,\n    options: dateOptionType ? dateOptionTypes[dateOptionType] : dateOptionTypes.full,\n    placeholder: i18n.translate('Polaris.ResourceList.FilterValueSelector.selectFilterValuePlaceholder'),\n    value: dateFilterOption,\n    onChange: handleDateFilterOptionsChange\n  }), datePredicateMarkup);\n\n  function getDateComparatorOptions() {\n    return [{\n      value: DateFilterOption.OnOrBefore,\n      label: i18n.translate('Polaris.ResourceList.DateSelector.SelectOptions.OnOrBefore')\n    }, {\n      value: DateFilterOption.OnOrAfter,\n      label: i18n.translate('Polaris.ResourceList.DateSelector.SelectOptions.OnOrAfter')\n    }];\n  }\n\n  function getDatePastOptions() {\n    return [{\n      value: DateFilterOption.PastWeek,\n      label: i18n.translate('Polaris.ResourceList.DateSelector.SelectOptions.PastWeek')\n    }, {\n      value: DateFilterOption.PastMonth,\n      label: i18n.translate('Polaris.ResourceList.DateSelector.SelectOptions.PastMonth')\n    }, {\n      value: DateFilterOption.PastQuarter,\n      label: i18n.translate('Polaris.ResourceList.DateSelector.SelectOptions.PastQuarter')\n    }, {\n      value: DateFilterOption.PastYear,\n      label: i18n.translate('Polaris.ResourceList.DateSelector.SelectOptions.PastYear')\n    }];\n  }\n\n  function getDateFutureOptions() {\n    return [{\n      value: DateFilterOption.ComingWeek,\n      label: i18n.translate('Polaris.ResourceList.DateSelector.SelectOptions.ComingWeek')\n    }, {\n      value: DateFilterOption.ComingMonth,\n      label: i18n.translate('Polaris.ResourceList.DateSelector.SelectOptions.ComingMonth')\n    }, {\n      value: DateFilterOption.ComingQuarter,\n      label: i18n.translate('Polaris.ResourceList.DateSelector.SelectOptions.ComingQuarter')\n    }, {\n      value: DateFilterOption.ComingYear,\n      label: i18n.translate('Polaris.ResourceList.DateSelector.SelectOptions.ComingYear')\n    }];\n  }\n\n  function getDateTextFieldValue() {\n    if (!userInputDate && !selectedDate) {\n      return undefined;\n    }\n\n    if (userInputDate !== undefined) {\n      return userInputDate;\n    }\n\n    if (selectedDate) {\n      return stripTimeFromISOString(formatDateForLocalTimezone(selectedDate));\n    }\n  }\n});\n\nfunction isValidDate(date) {\n  if (!date) {\n    return false;\n  }\n\n  return VALID_DATE_REGEX.test(date) && !isNaN(new Date(date).getTime());\n}\n\nfunction getDateFilterOption(filterValue, filterKey, filterMinKey, filterMaxKey) {\n  if (filterKey === filterMaxKey) {\n    return DateFilterOption.OnOrBefore;\n  }\n\n  if (filterKey === filterMinKey) {\n    return DateFilterOption.OnOrAfter;\n  }\n\n  return filterValue;\n}\n\nfunction stripTimeFromISOString(ISOString) {\n  return ISOString.slice(0, 10);\n}\n\nfunction formatDateForLocalTimezone(date) {\n  const timezoneOffset = date.getTimezoneOffset();\n  const timezoneOffsetMs = timezoneOffset * 60 * 1000;\n  const isFringeTimezone = timezoneOffset === -720 || timezoneOffset === 720;\n  const formattedDate = new Date();\n\n  if (isFringeTimezone && date.getHours() !== 0) {\n    return date.toISOString();\n  }\n\n  const newTime = timezoneOffset > -1 ? date.getTime() + timezoneOffsetMs : date.getTime() - timezoneOffsetMs;\n  formattedDate.setTime(newTime);\n  return formattedDate.toISOString();\n}\n\nexport { DateFilterOption, DateSelector };\n"]},"metadata":{},"sourceType":"module"}