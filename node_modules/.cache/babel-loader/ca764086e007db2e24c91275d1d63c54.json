{"ast":null,"code":"import { useState, useCallback } from 'react';\nlet SelectionType;\n\n(function (SelectionType) {\n  SelectionType[\"All\"] = \"all\";\n  SelectionType[\"Page\"] = \"page\";\n  SelectionType[\"Multi\"] = \"multi\";\n  SelectionType[\"Single\"] = \"single\";\n})(SelectionType || (SelectionType = {}));\n\nfunction defaultResourceIDResolver(resource) {\n  if ('id' in resource) {\n    return resource.id;\n  }\n\n  throw new Error('Your resource does not directly contain an `id`. Pass a `resourceIDResolver` to `useIndexResourceState`');\n}\n\nfunction useIndexResourceState(resources) {\n  let {\n    selectedResources: initSelectedResources = [],\n    allResourcesSelected: initAllResourcesSelected = false,\n    resourceIDResolver = defaultResourceIDResolver\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    selectedResources: [],\n    allResourcesSelected: false,\n    resourceIDResolver: defaultResourceIDResolver\n  };\n  const [selectedResources, setSelectedResources] = useState(initSelectedResources);\n  const [allResourcesSelected, setAllResourcesSelected] = useState(initAllResourcesSelected);\n  const handleSelectionChange = useCallback((selectionType, isSelecting, selection) => {\n    if (selectionType === SelectionType.All) {\n      setAllResourcesSelected(isSelecting);\n    } else if (allResourcesSelected) {\n      setAllResourcesSelected(false);\n    }\n\n    switch (selectionType) {\n      case SelectionType.Single:\n        setSelectedResources(newSelectedResources => isSelecting ? [...newSelectedResources, selection] : newSelectedResources.filter(id => id !== selection));\n        break;\n\n      case SelectionType.All:\n      case SelectionType.Page:\n        setSelectedResources(isSelecting ? resources.map(resourceIDResolver) : []);\n        break;\n\n      case SelectionType.Multi:\n        if (!selection) break;\n        setSelectedResources(newSelectedResources => {\n          const ids = [];\n\n          for (let i = selection[0]; i <= selection[1]; i++) {\n            const id = resourceIDResolver(resources[i]);\n\n            if (isSelecting && !newSelectedResources.includes(id) || !isSelecting && newSelectedResources.includes(id)) {\n              ids.push(id);\n            }\n          }\n\n          return isSelecting ? [...newSelectedResources, ...ids] : newSelectedResources.filter(id => !ids.includes(id));\n        });\n        break;\n    }\n  }, [allResourcesSelected, resources, resourceIDResolver]);\n  return {\n    selectedResources,\n    allResourcesSelected,\n    handleSelectionChange\n  };\n}\n\nexport { SelectionType, useIndexResourceState };","map":{"version":3,"sources":["/Users/yewonkwak/Documents/GitHub/spacestagram/node_modules/@shopify/polaris/dist/esm/utilities/use-index-resource-state.js"],"names":["useState","useCallback","SelectionType","defaultResourceIDResolver","resource","id","Error","useIndexResourceState","resources","selectedResources","initSelectedResources","allResourcesSelected","initAllResourcesSelected","resourceIDResolver","setSelectedResources","setAllResourcesSelected","handleSelectionChange","selectionType","isSelecting","selection","All","Single","newSelectedResources","filter","Page","map","Multi","ids","i","includes","push"],"mappings":"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","sourcesContent":["import { useState, useCallback } from 'react';\n\nlet SelectionType;\n\n(function (SelectionType) {\n  SelectionType[\"All\"] = \"all\";\n  SelectionType[\"Page\"] = \"page\";\n  SelectionType[\"Multi\"] = \"multi\";\n  SelectionType[\"Single\"] = \"single\";\n})(SelectionType || (SelectionType = {}));\n\nfunction defaultResourceIDResolver(resource) {\n  if ('id' in resource) {\n    return resource.id;\n  }\n\n  throw new Error('Your resource does not directly contain an `id`. Pass a `resourceIDResolver` to `useIndexResourceState`');\n}\n\nfunction useIndexResourceState(resources, {\n  selectedResources: initSelectedResources = [],\n  allResourcesSelected: initAllResourcesSelected = false,\n  resourceIDResolver = defaultResourceIDResolver\n} = {\n  selectedResources: [],\n  allResourcesSelected: false,\n  resourceIDResolver: defaultResourceIDResolver\n}) {\n  const [selectedResources, setSelectedResources] = useState(initSelectedResources);\n  const [allResourcesSelected, setAllResourcesSelected] = useState(initAllResourcesSelected);\n  const handleSelectionChange = useCallback((selectionType, isSelecting, selection) => {\n    if (selectionType === SelectionType.All) {\n      setAllResourcesSelected(isSelecting);\n    } else if (allResourcesSelected) {\n      setAllResourcesSelected(false);\n    }\n\n    switch (selectionType) {\n      case SelectionType.Single:\n        setSelectedResources(newSelectedResources => isSelecting ? [...newSelectedResources, selection] : newSelectedResources.filter(id => id !== selection));\n        break;\n\n      case SelectionType.All:\n      case SelectionType.Page:\n        setSelectedResources(isSelecting ? resources.map(resourceIDResolver) : []);\n        break;\n\n      case SelectionType.Multi:\n        if (!selection) break;\n        setSelectedResources(newSelectedResources => {\n          const ids = [];\n\n          for (let i = selection[0]; i <= selection[1]; i++) {\n            const id = resourceIDResolver(resources[i]);\n\n            if (isSelecting && !newSelectedResources.includes(id) || !isSelecting && newSelectedResources.includes(id)) {\n              ids.push(id);\n            }\n          }\n\n          return isSelecting ? [...newSelectedResources, ...ids] : newSelectedResources.filter(id => !ids.includes(id));\n        });\n        break;\n    }\n  }, [allResourcesSelected, resources, resourceIDResolver]);\n  return {\n    selectedResources,\n    allResourcesSelected,\n    handleSelectionChange\n  };\n}\n\nexport { SelectionType, useIndexResourceState };\n"]},"metadata":{},"sourceType":"module"}