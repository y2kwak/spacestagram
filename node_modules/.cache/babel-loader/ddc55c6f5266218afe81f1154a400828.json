{"ast":null,"code":"import { useContext, useRef, useCallback } from 'react';\nimport { useI18n } from '../i18n/hooks.js';\nimport { SELECT_ALL_ITEMS, SelectionType } from './types.js';\nimport { IndexSelectionChangeContext, IndexRowContext, IndexContext } from './context.js';\n\nfunction useIndexSelectionChange() {\n  const onSelectionChange = useContext(IndexSelectionChangeContext);\n\n  if (!onSelectionChange) {\n    throw new Error(`Missing IndexProvider context`);\n  }\n\n  return onSelectionChange;\n}\n\nfunction useIndexRow() {\n  const indexRow = useContext(IndexRowContext);\n\n  if (!indexRow) {\n    throw new Error(`Missing IndexProvider context`);\n  }\n\n  return indexRow;\n}\n\nfunction useIndexValue() {\n  const index = useContext(IndexContext);\n\n  if (!index) {\n    throw new Error(`Missing IndexProvider context`);\n  }\n\n  return index;\n}\n\nfunction useBulkSelectionData(_ref) {\n  let {\n    selectedItemsCount,\n    itemCount,\n    hasMoreItems,\n    resourceName: passedResourceName\n  } = _ref;\n  const i18n = useI18n();\n  const selectable = Boolean(selectedItemsCount);\n  const selectMode = selectedItemsCount === 'All' || selectedItemsCount > 0;\n  const defaultResourceName = {\n    singular: i18n.translate('Polaris.IndexProvider.defaultItemSingular'),\n    plural: i18n.translate('Polaris.IndexProvider.defaultItemPlural')\n  };\n  const resourceName = passedResourceName ? passedResourceName : defaultResourceName;\n  const paginatedSelectAllText = getPaginatedSelectAllText();\n  const bulkActionsLabel = getBulkActionsLabel();\n  const bulkActionsAccessibilityLabel = getBulkActionsAccessibilityLabel();\n  let bulkSelectState = 'indeterminate';\n\n  if (!selectedItemsCount || selectedItemsCount === 0) {\n    bulkSelectState = undefined;\n  } else if (selectedItemsCount === SELECT_ALL_ITEMS || selectedItemsCount === itemCount) {\n    bulkSelectState = true;\n  }\n\n  return {\n    paginatedSelectAllText,\n    bulkActionsLabel,\n    bulkActionsAccessibilityLabel,\n    resourceName,\n    selectMode,\n    bulkSelectState,\n    selectable\n  };\n\n  function getPaginatedSelectAllText() {\n    if (!selectable || !hasMoreItems) {\n      return;\n    }\n\n    if (selectedItemsCount === SELECT_ALL_ITEMS) {\n      return i18n.translate('Polaris.IndexProvider.allItemsSelected', {\n        itemsLength: itemCount,\n        resourceNamePlural: resourceName.plural.toLocaleLowerCase()\n      });\n    }\n  }\n\n  function getBulkActionsLabel() {\n    const selectedItemsCountLabel = selectedItemsCount === SELECT_ALL_ITEMS ? `${itemCount}+` : selectedItemsCount;\n    return i18n.translate('Polaris.IndexProvider.selected', {\n      selectedItemsCount: selectedItemsCountLabel\n    });\n  }\n\n  function getBulkActionsAccessibilityLabel() {\n    const totalItemsCount = itemCount;\n    const allSelected = selectedItemsCount === totalItemsCount;\n\n    if (totalItemsCount === 1 && allSelected) {\n      return i18n.translate('Polaris.IndexProvider.a11yCheckboxDeselectAllSingle', {\n        resourceNameSingular: resourceName.singular\n      });\n    } else if (totalItemsCount === 1) {\n      return i18n.translate('Polaris.IndexProvider.a11yCheckboxSelectAllSingle', {\n        resourceNameSingular: resourceName.singular\n      });\n    } else if (allSelected) {\n      return i18n.translate('Polaris.IndexProvider.a11yCheckboxDeselectAllMultiple', {\n        itemsLength: itemCount,\n        resourceNamePlural: resourceName.plural\n      });\n    } else {\n      return i18n.translate('Polaris.IndexProvider.a11yCheckboxSelectAllMultiple', {\n        itemsLength: itemCount,\n        resourceNamePlural: resourceName.plural\n      });\n    }\n  }\n}\n\nfunction useHandleBulkSelection(_ref2) {\n  let {\n    onSelectionChange\n  } = _ref2;\n  const lastSelected = useRef(null);\n  const handleSelectionChange = useCallback((selectionType, toggleType, selection, sortOrder) => {\n    const prevSelected = lastSelected.current;\n\n    if (SelectionType.Multi && typeof sortOrder === 'number') {\n      lastSelected.current = sortOrder;\n    }\n\n    if (selectionType === SelectionType.Single || selectionType === SelectionType.Multi && (typeof prevSelected !== 'number' || typeof sortOrder !== 'number')) {\n      onSelectionChange(SelectionType.Single, toggleType, selection);\n    } else if (selectionType === SelectionType.Multi) {\n      const min = Math.min(prevSelected, sortOrder);\n      const max = Math.max(prevSelected, sortOrder);\n      onSelectionChange(selectionType, toggleType, [min, max]);\n    } else if (selectionType === SelectionType.Page || selectionType === SelectionType.All) {\n      onSelectionChange(selectionType, toggleType);\n    }\n  }, [onSelectionChange]);\n  return handleSelectionChange;\n}\n\nexport { useBulkSelectionData, useHandleBulkSelection, useIndexRow, useIndexSelectionChange, useIndexValue };","map":{"version":3,"sources":["/Users/yewonkwak/Documents/GitHub/spacestagram/node_modules/@shopify/polaris/dist/esm/utilities/index-provider/hooks.js"],"names":["useContext","useRef","useCallback","useI18n","SELECT_ALL_ITEMS","SelectionType","IndexSelectionChangeContext","IndexRowContext","IndexContext","useIndexSelectionChange","onSelectionChange","Error","useIndexRow","indexRow","useIndexValue","index","useBulkSelectionData","selectedItemsCount","itemCount","hasMoreItems","resourceName","passedResourceName","i18n","selectable","Boolean","selectMode","defaultResourceName","singular","translate","plural","paginatedSelectAllText","getPaginatedSelectAllText","bulkActionsLabel","getBulkActionsLabel","bulkActionsAccessibilityLabel","getBulkActionsAccessibilityLabel","bulkSelectState","undefined","itemsLength","resourceNamePlural","toLocaleLowerCase","selectedItemsCountLabel","totalItemsCount","allSelected","resourceNameSingular","useHandleBulkSelection","lastSelected","handleSelectionChange","selectionType","toggleType","selection","sortOrder","prevSelected","current","Multi","Single","min","Math","max","Page","All"],"mappings":"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","sourcesContent":["import { useContext, useRef, useCallback } from 'react';\nimport { useI18n } from '../i18n/hooks.js';\nimport { SELECT_ALL_ITEMS, SelectionType } from './types.js';\nimport { IndexSelectionChangeContext, IndexRowContext, IndexContext } from './context.js';\n\nfunction useIndexSelectionChange() {\n  const onSelectionChange = useContext(IndexSelectionChangeContext);\n\n  if (!onSelectionChange) {\n    throw new Error(`Missing IndexProvider context`);\n  }\n\n  return onSelectionChange;\n}\nfunction useIndexRow() {\n  const indexRow = useContext(IndexRowContext);\n\n  if (!indexRow) {\n    throw new Error(`Missing IndexProvider context`);\n  }\n\n  return indexRow;\n}\nfunction useIndexValue() {\n  const index = useContext(IndexContext);\n\n  if (!index) {\n    throw new Error(`Missing IndexProvider context`);\n  }\n\n  return index;\n}\nfunction useBulkSelectionData({\n  selectedItemsCount,\n  itemCount,\n  hasMoreItems,\n  resourceName: passedResourceName\n}) {\n  const i18n = useI18n();\n  const selectable = Boolean(selectedItemsCount);\n  const selectMode = selectedItemsCount === 'All' || selectedItemsCount > 0;\n  const defaultResourceName = {\n    singular: i18n.translate('Polaris.IndexProvider.defaultItemSingular'),\n    plural: i18n.translate('Polaris.IndexProvider.defaultItemPlural')\n  };\n  const resourceName = passedResourceName ? passedResourceName : defaultResourceName;\n  const paginatedSelectAllText = getPaginatedSelectAllText();\n  const bulkActionsLabel = getBulkActionsLabel();\n  const bulkActionsAccessibilityLabel = getBulkActionsAccessibilityLabel();\n  let bulkSelectState = 'indeterminate';\n\n  if (!selectedItemsCount || selectedItemsCount === 0) {\n    bulkSelectState = undefined;\n  } else if (selectedItemsCount === SELECT_ALL_ITEMS || selectedItemsCount === itemCount) {\n    bulkSelectState = true;\n  }\n\n  return {\n    paginatedSelectAllText,\n    bulkActionsLabel,\n    bulkActionsAccessibilityLabel,\n    resourceName,\n    selectMode,\n    bulkSelectState,\n    selectable\n  };\n\n  function getPaginatedSelectAllText() {\n    if (!selectable || !hasMoreItems) {\n      return;\n    }\n\n    if (selectedItemsCount === SELECT_ALL_ITEMS) {\n      return i18n.translate('Polaris.IndexProvider.allItemsSelected', {\n        itemsLength: itemCount,\n        resourceNamePlural: resourceName.plural.toLocaleLowerCase()\n      });\n    }\n  }\n\n  function getBulkActionsLabel() {\n    const selectedItemsCountLabel = selectedItemsCount === SELECT_ALL_ITEMS ? `${itemCount}+` : selectedItemsCount;\n    return i18n.translate('Polaris.IndexProvider.selected', {\n      selectedItemsCount: selectedItemsCountLabel\n    });\n  }\n\n  function getBulkActionsAccessibilityLabel() {\n    const totalItemsCount = itemCount;\n    const allSelected = selectedItemsCount === totalItemsCount;\n\n    if (totalItemsCount === 1 && allSelected) {\n      return i18n.translate('Polaris.IndexProvider.a11yCheckboxDeselectAllSingle', {\n        resourceNameSingular: resourceName.singular\n      });\n    } else if (totalItemsCount === 1) {\n      return i18n.translate('Polaris.IndexProvider.a11yCheckboxSelectAllSingle', {\n        resourceNameSingular: resourceName.singular\n      });\n    } else if (allSelected) {\n      return i18n.translate('Polaris.IndexProvider.a11yCheckboxDeselectAllMultiple', {\n        itemsLength: itemCount,\n        resourceNamePlural: resourceName.plural\n      });\n    } else {\n      return i18n.translate('Polaris.IndexProvider.a11yCheckboxSelectAllMultiple', {\n        itemsLength: itemCount,\n        resourceNamePlural: resourceName.plural\n      });\n    }\n  }\n}\nfunction useHandleBulkSelection({\n  onSelectionChange\n}) {\n  const lastSelected = useRef(null);\n  const handleSelectionChange = useCallback((selectionType, toggleType, selection, sortOrder) => {\n    const prevSelected = lastSelected.current;\n\n    if (SelectionType.Multi && typeof sortOrder === 'number') {\n      lastSelected.current = sortOrder;\n    }\n\n    if (selectionType === SelectionType.Single || selectionType === SelectionType.Multi && (typeof prevSelected !== 'number' || typeof sortOrder !== 'number')) {\n      onSelectionChange(SelectionType.Single, toggleType, selection);\n    } else if (selectionType === SelectionType.Multi) {\n      const min = Math.min(prevSelected, sortOrder);\n      const max = Math.max(prevSelected, sortOrder);\n      onSelectionChange(selectionType, toggleType, [min, max]);\n    } else if (selectionType === SelectionType.Page || selectionType === SelectionType.All) {\n      onSelectionChange(selectionType, toggleType);\n    }\n  }, [onSelectionChange]);\n  return handleSelectionChange;\n}\n\nexport { useBulkSelectionData, useHandleBulkSelection, useIndexRow, useIndexSelectionChange, useIndexValue };\n"]},"metadata":{},"sourceType":"module"}