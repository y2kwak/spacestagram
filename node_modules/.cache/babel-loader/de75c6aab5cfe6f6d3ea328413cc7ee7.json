{"ast":null,"code":"import React$1, { useState, useCallback, useMemo } from 'react';\nimport { FocusManagerContext } from '../../utilities/focus-manager/context.js';\n\nfunction FocusManager(_ref) {\n  let {\n    children\n  } = _ref;\n  const [trapFocusList, setTrapFocusList] = useState([]);\n  const add = useCallback(id => {\n    setTrapFocusList(list => [...list, id]);\n  }, []);\n  const remove = useCallback(id => {\n    let removed = true;\n    setTrapFocusList(list => {\n      const clone = [...list];\n      const index = clone.indexOf(id);\n\n      if (index === -1) {\n        removed = false;\n      } else {\n        clone.splice(index, 1);\n      }\n\n      return clone;\n    });\n    return removed;\n  }, []);\n  const value = useMemo(() => ({\n    trapFocusList,\n    add,\n    remove\n  }), [add, trapFocusList, remove]);\n  return /*#__PURE__*/React$1.createElement(FocusManagerContext.Provider, {\n    value: value\n  }, children);\n}\n\nexport { FocusManager };","map":{"version":3,"sources":["/Users/yewonkwak/Documents/GitHub/spacestagram/node_modules/@shopify/polaris/dist/esm/components/FocusManager/FocusManager.js"],"names":["React$1","useState","useCallback","useMemo","FocusManagerContext","FocusManager","children","trapFocusList","setTrapFocusList","add","id","list","remove","removed","clone","index","indexOf","splice","value","createElement","Provider"],"mappings":"AAAA,OAAOA,OAAP,IAAkBC,QAAlB,EAA4BC,WAA5B,EAAyCC,OAAzC,QAAwD,OAAxD;AACA,SAASC,mBAAT,QAAoC,0CAApC;;AAEA,SAASC,YAAT,OAEG;AAAA,MAFmB;AACpBC,IAAAA;AADoB,GAEnB;AACD,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCP,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAMQ,GAAG,GAAGP,WAAW,CAACQ,EAAE,IAAI;AAC5BF,IAAAA,gBAAgB,CAACG,IAAI,IAAI,CAAC,GAAGA,IAAJ,EAAUD,EAAV,CAAT,CAAhB;AACD,GAFsB,EAEpB,EAFoB,CAAvB;AAGA,QAAME,MAAM,GAAGV,WAAW,CAACQ,EAAE,IAAI;AAC/B,QAAIG,OAAO,GAAG,IAAd;AACAL,IAAAA,gBAAgB,CAACG,IAAI,IAAI;AACvB,YAAMG,KAAK,GAAG,CAAC,GAAGH,IAAJ,CAAd;AACA,YAAMI,KAAK,GAAGD,KAAK,CAACE,OAAN,CAAcN,EAAd,CAAd;;AAEA,UAAIK,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBF,QAAAA,OAAO,GAAG,KAAV;AACD,OAFD,MAEO;AACLC,QAAAA,KAAK,CAACG,MAAN,CAAaF,KAAb,EAAoB,CAApB;AACD;;AAED,aAAOD,KAAP;AACD,KAXe,CAAhB;AAYA,WAAOD,OAAP;AACD,GAfyB,EAevB,EAfuB,CAA1B;AAgBA,QAAMK,KAAK,GAAGf,OAAO,CAAC,OAAO;AAC3BI,IAAAA,aAD2B;AAE3BE,IAAAA,GAF2B;AAG3BG,IAAAA;AAH2B,GAAP,CAAD,EAIjB,CAACH,GAAD,EAAMF,aAAN,EAAqBK,MAArB,CAJiB,CAArB;AAKA,SAAO,aAAaZ,OAAO,CAACmB,aAAR,CAAsBf,mBAAmB,CAACgB,QAA1C,EAAoD;AACtEF,IAAAA,KAAK,EAAEA;AAD+D,GAApD,EAEjBZ,QAFiB,CAApB;AAGD;;AAED,SAASD,YAAT","sourcesContent":["import React$1, { useState, useCallback, useMemo } from 'react';\nimport { FocusManagerContext } from '../../utilities/focus-manager/context.js';\n\nfunction FocusManager({\n  children\n}) {\n  const [trapFocusList, setTrapFocusList] = useState([]);\n  const add = useCallback(id => {\n    setTrapFocusList(list => [...list, id]);\n  }, []);\n  const remove = useCallback(id => {\n    let removed = true;\n    setTrapFocusList(list => {\n      const clone = [...list];\n      const index = clone.indexOf(id);\n\n      if (index === -1) {\n        removed = false;\n      } else {\n        clone.splice(index, 1);\n      }\n\n      return clone;\n    });\n    return removed;\n  }, []);\n  const value = useMemo(() => ({\n    trapFocusList,\n    add,\n    remove\n  }), [add, trapFocusList, remove]);\n  return /*#__PURE__*/React$1.createElement(FocusManagerContext.Provider, {\n    value: value\n  }, children);\n}\n\nexport { FocusManager };\n"]},"metadata":{},"sourceType":"module"}