{"ast":null,"code":"const WEEK_LENGTH = 7;\n\nfunction getWeeksForMonth(month, year) {\n  let weekStartsOn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  const firstOfMonth = new Date(year, month, 1);\n  const firstDayOfWeek = firstOfMonth.getDay();\n  const weeks = [[]];\n  let currentWeek = weeks[0];\n  let currentDate = firstOfMonth;\n  const orderedWeekday = getOrderedWeekdays(weekStartsOn);\n\n  for (let i = 0; i < orderedWeekday.indexOf(firstDayOfWeek); i++) {\n    currentWeek.push(null);\n  }\n\n  while (currentDate.getMonth() === month) {\n    if (currentWeek.length === WEEK_LENGTH) {\n      currentWeek = [];\n      weeks.push(currentWeek);\n    }\n\n    currentWeek.push(currentDate);\n    currentDate = new Date(year, month, currentDate.getDate() + 1);\n  }\n\n  while (currentWeek.length < 7) {\n    currentWeek.push(null);\n  }\n\n  return weeks;\n}\n\nfunction dateIsInRange(day, range) {\n  if (day == null) {\n    return false;\n  }\n\n  const {\n    start,\n    end\n  } = range;\n  return Boolean(start && day > start && end && day < end);\n}\n\nfunction dateIsSelected(day, range) {\n  if (day == null) {\n    return false;\n  }\n\n  const {\n    start,\n    end\n  } = range;\n  return Boolean(start && isSameDay(start, day) || end && isSameDay(end, day));\n}\n\nfunction isSameDay(day1, day2) {\n  return day1.getDate() === day2.getDate() && day1.getMonth() === day2.getMonth() && day1.getFullYear() === day2.getFullYear();\n}\n\nfunction getNewRange(range, selected) {\n  if (range == null) {\n    return {\n      start: selected,\n      end: selected\n    };\n  }\n\n  const {\n    start,\n    end\n  } = range;\n\n  if (end && (isDateAfter(start, end) || isDateBefore(start, end))) {\n    return {\n      start: selected,\n      end: selected\n    };\n  }\n\n  if (start) {\n    if (isDateBefore(selected, start)) {\n      return {\n        start: selected,\n        end: selected\n      };\n    }\n\n    return {\n      start,\n      end: selected\n    };\n  }\n\n  if (end) {\n    if (isDateBefore(selected, end)) {\n      return {\n        start: selected,\n        end\n      };\n    }\n\n    return {\n      start: start || end,\n      end: selected\n    };\n  }\n\n  return {\n    start: selected,\n    end: selected\n  };\n}\n\nfunction getNextDisplayMonth(month) {\n  if (month === 11) {\n    return 0;\n  }\n\n  return month + 1;\n}\n\nfunction getNextDisplayYear(month, year) {\n  if (month === 11) {\n    return year + 1;\n  }\n\n  return year;\n}\n\nfunction getPreviousDisplayMonth(month) {\n  if (month === 0) {\n    return 11;\n  }\n\n  return month - 1;\n}\n\nfunction getPreviousDisplayYear(month, year) {\n  if (month === 0) {\n    return year - 1;\n  }\n\n  return year;\n}\n\nfunction isDateAfter(date, dateToCompare) {\n  return date.getTime() > dateToCompare.getTime();\n}\n\nfunction isDateBefore(date, dateToCompare) {\n  return date.getTime() < dateToCompare.getTime();\n}\n\nconst WEEKDAYS = [0, 1, 2, 3, 4, 5, 6];\n\nfunction getOrderedWeekdays(weekStartsOn) {\n  const weekDays = [...WEEKDAYS];\n  const restOfDays = weekDays.splice(weekStartsOn);\n  return [...restOfDays, ...weekDays];\n}\n\nexport { dateIsInRange, dateIsSelected, getNewRange, getNextDisplayMonth, getNextDisplayYear, getOrderedWeekdays, getPreviousDisplayMonth, getPreviousDisplayYear, getWeeksForMonth, isDateAfter, isDateBefore, isSameDay };","map":{"version":3,"sources":["/Users/yewonkwak/Documents/GitHub/spacestagram/node_modules/@shopify/polaris/dist/esm/utilities/dates.js"],"names":["WEEK_LENGTH","getWeeksForMonth","month","year","weekStartsOn","firstOfMonth","Date","firstDayOfWeek","getDay","weeks","currentWeek","currentDate","orderedWeekday","getOrderedWeekdays","i","indexOf","push","getMonth","length","getDate","dateIsInRange","day","range","start","end","Boolean","dateIsSelected","isSameDay","day1","day2","getFullYear","getNewRange","selected","isDateAfter","isDateBefore","getNextDisplayMonth","getNextDisplayYear","getPreviousDisplayMonth","getPreviousDisplayYear","date","dateToCompare","getTime","WEEKDAYS","weekDays","restOfDays","splice"],"mappings":"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","sourcesContent":["const WEEK_LENGTH = 7;\nfunction getWeeksForMonth(month, year, weekStartsOn = 0) {\n  const firstOfMonth = new Date(year, month, 1);\n  const firstDayOfWeek = firstOfMonth.getDay();\n  const weeks = [[]];\n  let currentWeek = weeks[0];\n  let currentDate = firstOfMonth;\n  const orderedWeekday = getOrderedWeekdays(weekStartsOn);\n\n  for (let i = 0; i < orderedWeekday.indexOf(firstDayOfWeek); i++) {\n    currentWeek.push(null);\n  }\n\n  while (currentDate.getMonth() === month) {\n    if (currentWeek.length === WEEK_LENGTH) {\n      currentWeek = [];\n      weeks.push(currentWeek);\n    }\n\n    currentWeek.push(currentDate);\n    currentDate = new Date(year, month, currentDate.getDate() + 1);\n  }\n\n  while (currentWeek.length < 7) {\n    currentWeek.push(null);\n  }\n\n  return weeks;\n}\nfunction dateIsInRange(day, range) {\n  if (day == null) {\n    return false;\n  }\n\n  const {\n    start,\n    end\n  } = range;\n  return Boolean(start && day > start && end && day < end);\n}\nfunction dateIsSelected(day, range) {\n  if (day == null) {\n    return false;\n  }\n\n  const {\n    start,\n    end\n  } = range;\n  return Boolean(start && isSameDay(start, day) || end && isSameDay(end, day));\n}\nfunction isSameDay(day1, day2) {\n  return day1.getDate() === day2.getDate() && day1.getMonth() === day2.getMonth() && day1.getFullYear() === day2.getFullYear();\n}\nfunction getNewRange(range, selected) {\n  if (range == null) {\n    return {\n      start: selected,\n      end: selected\n    };\n  }\n\n  const {\n    start,\n    end\n  } = range;\n\n  if (end && (isDateAfter(start, end) || isDateBefore(start, end))) {\n    return {\n      start: selected,\n      end: selected\n    };\n  }\n\n  if (start) {\n    if (isDateBefore(selected, start)) {\n      return {\n        start: selected,\n        end: selected\n      };\n    }\n\n    return {\n      start,\n      end: selected\n    };\n  }\n\n  if (end) {\n    if (isDateBefore(selected, end)) {\n      return {\n        start: selected,\n        end\n      };\n    }\n\n    return {\n      start: start || end,\n      end: selected\n    };\n  }\n\n  return {\n    start: selected,\n    end: selected\n  };\n}\nfunction getNextDisplayMonth(month) {\n  if (month === 11) {\n    return 0;\n  }\n\n  return month + 1;\n}\nfunction getNextDisplayYear(month, year) {\n  if (month === 11) {\n    return year + 1;\n  }\n\n  return year;\n}\nfunction getPreviousDisplayMonth(month) {\n  if (month === 0) {\n    return 11;\n  }\n\n  return month - 1;\n}\nfunction getPreviousDisplayYear(month, year) {\n  if (month === 0) {\n    return year - 1;\n  }\n\n  return year;\n}\nfunction isDateAfter(date, dateToCompare) {\n  return date.getTime() > dateToCompare.getTime();\n}\nfunction isDateBefore(date, dateToCompare) {\n  return date.getTime() < dateToCompare.getTime();\n}\nconst WEEKDAYS = [0, 1, 2, 3, 4, 5, 6];\nfunction getOrderedWeekdays(weekStartsOn) {\n  const weekDays = [...WEEKDAYS];\n  const restOfDays = weekDays.splice(weekStartsOn);\n  return [...restOfDays, ...weekDays];\n}\n\nexport { dateIsInRange, dateIsSelected, getNewRange, getNextDisplayMonth, getNextDisplayYear, getOrderedWeekdays, getPreviousDisplayMonth, getPreviousDisplayYear, getWeeksForMonth, isDateAfter, isDateBefore, isSameDay };\n"]},"metadata":{},"sourceType":"module"}