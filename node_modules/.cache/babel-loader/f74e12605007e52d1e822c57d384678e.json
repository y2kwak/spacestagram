{"ast":null,"code":"var _jsxFileName = \"/Users/yewonkwak/Documents/GitHub/spacestagram/src/components/Card.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, ButtonGroup, Card, MediaCard, Stack, TextContainer, Toast } from '@shopify/polaris';\nimport { ThumbsUpMajor, ThumbsUpMinor, LinkMinor } from '@shopify/polaris-icons';\nimport moment from 'moment';\nimport './components.css';\nimport '../styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst copySingleImgUrl = date => {\n  if (window.location.pathname.includes(\"image\")) {\n    navigator.clipboard.writeText(window.location.href);\n  } else {\n    navigator.clipboard.writeText(window.location.origin + `/image/${date}`);\n  }\n};\n\nconst isImage = imageUrl => {\n  const imageExtensions = [\"png\", \"jpg\", \"gif\"];\n  return imageExtensions.find(ext => imageUrl.includes(ext));\n};\n\nconst ImageCard = props => {\n  _s();\n\n  const [isLiked, setIsLiked] = React.useState(false);\n  const [showToast, setShowToast] = React.useState(false);\n  const toggleActive = React.useCallback(() => {\n    setShowToast(showToast => !showToast);\n  }, []);\n  React.useEffect(() => {\n    if (localStorage.getItem(props.date)) setIsLiked(true);\n  }, [props.date, setIsLiked]);\n  const linkCopiedToast = showToast ? /*#__PURE__*/_jsxDEV(Toast, {\n    content: \"Link copied!\",\n    onDismiss: toggleActive,\n    duration: 4500\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this) : null;\n  return false ? /*#__PURE__*/_jsxDEV(MediaCard, {\n    title: moment(props.date).format(\"MMMM Do, YYYY\") + \": \" + props.title,\n    description: \"hello\",\n    primaryAction: {\n      content: 'Like',\n      onAction: () => {}\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 7\n  }, this) : /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n      title: moment(props.date).format(\"MMMM Do, YYYY\") + \": \" + props.title,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        plain: true,\n        icon: LinkMinor,\n        onClick: () => {\n          toggleActive();\n          copySingleImgUrl(props.date);\n        },\n        children: \"Share\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), linkCopiedToast]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Card.Section, {\n      children: [isImage(props.imageUrl) ? /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: props.title,\n        width: \"100%\",\n        src: props.imageUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"iframe\", {\n        title: props.title,\n        width: \"100%\",\n        height: \"315px\",\n        src: props.imageUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this), props.isSingleCard && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cardTextArea\",\n        children: /*#__PURE__*/_jsxDEV(TextContainer, {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: props.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-m\",\n        children: /*#__PURE__*/_jsxDEV(Stack, {\n          alignment: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Stack.Item, {\n            fill: true,\n            children: /*#__PURE__*/_jsxDEV(ButtonGroup, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                primary: !isLiked,\n                pressed: isLiked,\n                icon: isLiked ? ThumbsUpMajor : ThumbsUpMinor,\n                onClick: () => {\n                  setIsLiked(!isLiked);\n                  !isLiked ? localStorage.setItem(String(props.date), \"liked\") : localStorage.removeItem(String(props.date));\n                },\n                children: isLiked ? \"Liked\" : \"Like\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 15\n              }, this), !props.isSingleCard && /*#__PURE__*/_jsxDEV(Link, {\n                to: `/image/${props.date}`,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  children: \"View more\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 110,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this), props.credit && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Photo \\xA9 \", props.credit]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 7\n  }, this);\n};\n\n_s(ImageCard, \"rMMvdqFjGubkNPbF4vCwrpNvSUY=\");\n\n_c = ImageCard;\nexport default ImageCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageCard\");","map":{"version":3,"sources":["/Users/yewonkwak/Documents/GitHub/spacestagram/src/components/Card.tsx"],"names":["React","Link","Button","ButtonGroup","Card","MediaCard","Stack","TextContainer","Toast","ThumbsUpMajor","ThumbsUpMinor","LinkMinor","moment","copySingleImgUrl","date","window","location","pathname","includes","navigator","clipboard","writeText","href","origin","isImage","imageUrl","imageExtensions","find","ext","ImageCard","props","isLiked","setIsLiked","useState","showToast","setShowToast","toggleActive","useCallback","useEffect","localStorage","getItem","linkCopiedToast","format","title","content","onAction","isSingleCard","description","setItem","String","removeItem","credit"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, ButtonGroup, Card, MediaCard, Stack, TextContainer, Toast } from '@shopify/polaris';\nimport { ThumbsUpMajor, ThumbsUpMinor, LinkMinor } from '@shopify/polaris-icons';\n\nimport moment from 'moment';\nimport './components.css';\nimport '../styles.css'\n\ntype ImageCardProps = {\n    title: string,\n    date: string,\n    imageUrl: string,\n    description: string,\n    credit?: string,\n    isSingleCard: boolean\n};\n\nconst copySingleImgUrl = (date: string) => {\n  if(window.location.pathname.includes(\"image\")) {\n    navigator.clipboard.writeText(window.location.href)\n  } else {\n    navigator.clipboard.writeText(window.location.origin + `/image/${date}`)\n  }\n}\n\nconst isImage = (imageUrl: string) => {\n  const imageExtensions = [\"png\", \"jpg\", \"gif\"]\n  return imageExtensions.find((ext) =>imageUrl.includes(ext))\n}\n\nconst ImageCard: React.FC<ImageCardProps> = (props) => {\n  const [isLiked, setIsLiked] = React.useState<boolean>(false)\n  const [showToast, setShowToast] = React.useState<boolean>(false);\n\n  const toggleActive = React.useCallback(() => {\n    setShowToast((showToast) => !showToast)\n  }, []);\n\n  React.useEffect(() => {\n    if(localStorage.getItem(props.date)) setIsLiked(true)\n  }, [props.date, setIsLiked]);\n\n  const linkCopiedToast = showToast ? (\n    <Toast content=\"Link copied!\" onDismiss={toggleActive} duration={4500} />\n  ) : null\n\n  return (\n    false ? (\n      <MediaCard\n        title={moment(props.date).format(\"MMMM Do, YYYY\") + \": \" + props.title}\n        description=\"hello\"\n        primaryAction={{\n          content: 'Like',\n          onAction: () => {}\n        }}\n      >\n        \n      </MediaCard>\n    ) : (\n      <Card>\n        <Card.Header \n          title={moment(props.date).format(\"MMMM Do, YYYY\") + \": \" + props.title}\n        >\n          <Button \n            plain \n            icon={LinkMinor}\n            onClick={() => {\n              toggleActive()\n              copySingleImgUrl(props.date)\n            }}\n          >\n            Share\n          </Button>\n          {linkCopiedToast}\n        </Card.Header>\n        <Card.Section>\n          {isImage(props.imageUrl) ? (\n            <img alt={props.title} width=\"100%\" src={props.imageUrl}/>\n          ) : (\n            <iframe title={props.title} width=\"100%\" height=\"315px\" src={props.imageUrl}/>\n          )}\n          {props.isSingleCard && <div className=\"cardTextArea\">\n            <TextContainer>\n              <p>{props.description}</p>\n              \n            </TextContainer>\n          </div>}\n          <div className=\"mt-m\">\n          <Stack alignment=\"center\">\n            <Stack.Item fill>\n              <ButtonGroup>\n              <Button \n                primary={!isLiked}\n                pressed={isLiked}\n                icon={isLiked? ThumbsUpMajor : ThumbsUpMinor} \n                onClick={() => {\n                  setIsLiked(!isLiked)\n                  !isLiked ? (\n                    localStorage.setItem(String(props.date), \"liked\")\n                  ) : (\n                    localStorage.removeItem(String(props.date))\n                  )\n                }}\n              >\n                {isLiked ? \"Liked\" : \"Like\"}\n              </Button>\n              {!props.isSingleCard && \n                <Link to={`/image/${props.date}`}>\n                  <Button>\n                    View more\n                  </Button>\n                </Link>\n              }\n              </ButtonGroup>\n            </Stack.Item>\n            {props.credit &&\n              <p>Photo &copy;\t{props.credit}</p>\n            }\n          </Stack>\n          </div>\n\n        </Card.Section>\n      </Card>\n    ) \n  )\n}\nexport default ImageCard;"]},"metadata":{},"sourceType":"module"}